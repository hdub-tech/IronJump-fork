#!/bin/bash
## Navigation
ast_reboot() {
    echo -e "\r\nAre you sure you want to reboot the server?"
    prompt_reboot
}

prompt_reboot() {
    local prompt_response
    read -p "(C)ontinue or (R)eturn: " prompt_response
    case "$prompt_response" in
        C|c) echo -e "\r\n\tRebooting server NOW" ; shutdown -r now ; exit 0 ;;
        R|r) echo -e "\r\nReturning to Main Menu..." ; sleep 1 ; main_menu ;;
        *) invalid_choice ; prompt_reboot ;;
    esac
}

invalid_choice() {
    echo -e "\r\nInvalid Choice, try again...\r\n"
    sleep 2
    return 0
}

## OS Identification
f_os_identity() {
    #Detect OS and Version
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS_NAME=$ID
        OS_VERSION=$VERSION_ID
    elif [[ -f /etc/debian_version ]]; then
        OS_NAME="debian"
        OS_VERSION=$(cat /etc/debian_version)
    elif [[ -f /etc/redhat-release ]]; then
        OS_NAME="rhel"
        OS_VERSION=$(grep -oE '[0-9]+' /etc/redhat-release | head -1)
    elif [[ -f /etc/openbsd-version ]]; then
        OS_NAME="openbsd"
        OS_VERSION=$(uname -r)
    else
        OS_NAME="Unsupported/Undetermined"
        OS_VERSION="Unsupported/Undetermined"
        return 1
    fi
    #Determine package manager
    case "$OS_NAME" in
        "amzn") # Amazon Linux
            if [[ "$OS_VERSION" == "2" || "$OS_VERSION" == "2023" ]]; then
                PKG_MANAGER="yum"
            fi
            ;;
        "ubuntu"|"linuxmint") # Ubuntu, Mint
            if [[ "$OS_VERSION" =~ ^(14.04|16.04|18.04|20.04|22.04|24.04)$ ]]; then
                PKG_MANAGER="apt"
            fi
            ;;
        "debian") # Debian 10, 11, 12
            if [[ "$OS_VERSION" =~ ^(10|11|12)$ ]]; then
                PKG_MANAGER="apt"
            fi
            ;;
        "kali") # Kali Linux
            PKG_MANAGER="apt"
            ;;
        "parrot"|"parrotsec") # Parrot OS / ParrotSec OS
            PKG_MANAGER="apt"
            ;;
        "arch"|"blackarch") # Arch Linux / BlackArch
            PKG_MANAGER="pacman"
            ;;
        "rocky") # Rocky Linux 9
            if [[ "$OS_VERSION" == "9" ]]; then
                PKG_MANAGER="dnf"
            fi
            ;;
        "rhel"|"centos") # RHEL 7, 8, CentOS
            if [[ "$OS_VERSION" == "7" ]]; then
                PKG_MANAGER="yum"
            elif [[ "$OS_VERSION" == "8" ]]; then
                PKG_MANAGER="dnf"
            fi
            ;;
        "pfsense") # pfSense (FreeBSD-based)
            PKG_MANAGER="pkg"
            ;;
        "openbsd") # OpenBSD 6.2 or higher
            if (( $(echo "$OS_VERSION >= 6.2" | bc -l) )); then
                PKG_MANAGER="pkg_add"
            fi
            ;;
        "raspbian"|"raspberrypi") # Raspberry Pi OS
            PKG_MANAGER="apt"
            ;;
        *)
            echo "Unsupported OS: $OS_NAME $OS_VERSION"
            return 1
            ;;
    esac
    echo -e "## Hostname:\t$HOSTNAME"
    echo -e "## OS Name:\t$OS_NAME"
    echo -e "## OS Vers:\t$OS_VERSION"
    echo -e "## Package Mgr:\t$PKG_MANAGER"
    while read -r i; do echo -e "## IP Address:\t$i\r\n"; done < <(ip -4 -br a show scope global | awk '{print $3,$1}')
}

## Account Enumeration
list_accounts(){
    for account in $(getent passwd |grep "/home/ironjump/$1"|awk -F: '{print $1}'); do
    exp_date=$(sudo chage -l "$account" | grep -i "account expires" | awk '{print $NF}')
    if [[ "$exp_date" != "never" && "$exp_date" < "$(date +%Y-%m-%d)" ]]; then
        echo -e "(Disabled)\t$account\t$(getent passwd |grep $account |awk -F: '{print $5}')"
    else
        echo -e "(Enabled)\t$account\t$(getent passwd |grep $account |awk -F: '{print $5}')"
    fi
    done
}

list_users(){
    if [[ -z $1 ]]; then
        list_accounts users
    elif [[ $1 == "disabled" ]]; then
        list_accounts users |grep Disabled
    elif [[ $1 == "enabled" ]]; then
        list_accounts users |grep Enabled
    fi
}

list_endpoints(){
    if [[ -z $1 ]]; then
        list_accounts endpoints
    elif [[ $1 == "disabled" ]]; then
        list_accounts endpoints |grep Disabled
    elif [[ $1 == "enabled" ]]; then
        list_accounts endpoints |grep Enabled
    fi
}

## SSH Hardening
f_sshd_restart(){
    #Restart SSH Daemon
    echo "Restarting SSH Daemon"
    case "$PKG_MANAGER" in
        "apt"|"dnf"|"yum"|"pacman")
            systemctl restart ssh 2>/dev/null || systemctl restart sshd
            ;;
        "pkg") service sshd start ;;
        "pkg_add") rcctl start sshd ;;
        *) echo "Service management not recognized."; return 1 ;;
    esac
}

f_ssh_hard_os_selection() {
    local choice
    clear
    echo "Select the operating system to perform SSH hardening..."
    nav_top_bar
    echo "1. Amazon Linux 2023"
    echo "2. Ubuntu 24.04, Mint 22"
    echo "3. Ubuntu 22.04, Kali 2024, Parrot, ParrotSec 6.2"
    echo "4. Ubuntu 20.04"
    echo "5. Ubuntu 18.04"
    echo "6. Ubuntu 16.04"
    echo "7. Ubuntu 14.04"
    echo "8. Ubuntu Core 18"
    echo "9. Ubuntu Core 16"
    echo "10. Debian Bookworm (Debian 12), Raspberry Pi OS"
    echo "11. Debian Bullseye (Debian 11)"
    echo "12. Debian Buster (Debian 10)"
    echo "13. Rocky Linux 9"
    echo "14. RHEL 8 Server / CentOS 8 Server"
    echo "15. RHEL 7 Server / CentOS 7 Server"
    echo "16. pfSense 2.4"
    echo "17. OpenBSD 6.2 Server"
    nav_breaker_bar
    read -p "Enter your choice: " choice
    case $choice in
        1) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s1 ;;
        2) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s2 ;;
        3) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s3 ;;
        4) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s4 ;;
        5) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s5 ;;
        6) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s6 ;;
        7) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s7 ;;
        8) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s8 ;;
        9) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s9 ;;
        10) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s10 ;;
        11) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s11 ;;
        12) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s12 ;;
        13) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s13 ;;
        14) f_ssh_hard_regen_hostkeys_2 ; f_ssh_hard_s14 ;;
        15) f_ssh_hard_regen_hostkeys_3 ; f_ssh_hard_s15 ;;
        16) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s16 ;;
        17) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s17 ;;
        *) invalid_choice ; f_ssh_hard_os_selection ;;
    esac
}

f_ssh_hard_check() {
    local choice
    #Check for System's SSH Configuration File (1 of 2)
    if [[ -f $SSH_CONF_SYSTEM ]]; then
        echo -e "\r\n\tFound SSH Service Configuration File"
        echo -e "\t  !Recommended Action: Would you like to make a backup? (y/n)"
        echo -e "\t-------------------"
        read -p "Enter your choice: " choice
        case "$choice" in
            Yes|yes|Y|y) echo -e "\r\n\tMaking backup..." ; cp $SSH_CONF_SYSTEM $SSH_CONF_SYSTEM_BACKUP ;;
            No|no|N|n) echo -e "\r\n\tSkipping backup..." ;;
            *) invalid_choice ; sleep 1 ; f_ssh_hard_check ;; 
        esac
    else
        echo -e "\r\n\tSSH Config File Not Found. Returning to Main Menu." ; sleep 1 ; main_menu
    fi
    #Check for IronJump's SSH Configuration File (2 of 2)
    if [[ -f $SSH_CONF_IRONJUMP ]]; then
        echo -e "\r\n\tFound IronJump SSH Service Configuration File"
        echo -e "\t  !Recommended Action: Would you like to make a backup? (y/n)"
        echo -e "\t-------------------"
        read -p "Enter your choice: " choice
        case "$choice" in
            Yes|yes|Y|y) echo -e "\r\n\tMaking backup..." ; cp $SSH_CONF_IRONJUMP $SSH_CONF_IRONJUMP_BACKUP ;;
            No|no|N|n) echo -e "\r\n\tSkipping backup..." ;;
            *) invalid_choice ; sleep 1 ; f_ssh_hard_check ;; 
        esac
    fi
}

f_ssh_hard_regen_hostkeys_1() {
    local choice
    if [[ -f /etc/ssh/ssh_host_rsa_key && -f /etc/ssh/ssh_host_ed25519_key ]]; then
        echo -e "\r\n\tSSH host keys for RSA and ED25519 currently exist.\r\n\tDo you want to regenerate the keys? (y/n)"
        echo -e "\t\t- If this is the first time: Recommendation = yes"
        echo -e "\t\t- If this is a modification of SSH settings: Recommendation = no"
        echo -e "\t-------------------"
        read -p "Enter your choice: " choice
    else
        choice="y"
    fi
    case "$choice" in
        Yes|yes|Y|y)
            {
                rm -f /etc/ssh/ssh_host_*
                ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N ""
                ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ""
                f_ssh_hard_set_hostkeys
                f_ssh_hard_dh_moduli
            }
            ;;
        No|no|N|n) return 0 ;;
        *) invalid_choice ; f_ssh_hard_regen_hostkeys_1 ;;
    esac
}

f_ssh_hard_regen_hostkeys_2() {
    f_ssh_hard_regen_hostkeys_1
    chgrp ssh_keys /etc/ssh/{ssh_host_ed25519_key,ssh_host_rsa_key}
    chmod g+r etc/ssh/{ssh_host_ed25519_key,ssh_host_rsa_key}
}

f_ssh_hard_regen_hostkeys_3() {
    local ssh_audit_conf="/etc/systemd/system/sshd-keygen.service.d/zz-ironjump-crypt.conf"
    f_ssh_hard_regen_hostkeys_1
    mkdir -p /etc/systemd/system/sshd-keygen.service.d
    echo "[Unit]" > $ssh_audit_conf
    echo "ConditionFileNotEmpty=" >> $ssh_audit_cong
    echo "ConditionFileNotEmpty=!/etc/ssh/ssh_host_ed25519_key" >>$ssh_audit_conf
    systemctl daemon-reload
    f_ssh_hard_regen_hostkeys_2
}

f_ssh_hard_set_hostkeys() {
    #Enable RSA hostkey in system's sshd_conf file (Not in IronJump SSH Conf)
    if [[ $(grep "^\#HostKey /etc/ssh/ssh_host_rsa_key" < $SSH_CONF_SYSTEM |wc -l) -gt 0 ]]; then
        sed -i 's/^\#HostKey \/etc\/ssh\/ssh_host_rsa_key$/HostKey \/etc\/ssh\/ssh_host_rsa_key/g' $SSH_CONF_SYSTEM
    else
        echo -e "\nHostKey /etc/ssh/ssh_host_rsa_key\n" >> $SSH_CONF_SYSTEM
    fi

    #Enable ED25519 hostkey
    if [[ $(grep "^\#HostKey /etc/ssh/ssh_host_ed25519_key" < $SSH_CONF_SYSTEM |wc -l) -gt 0 ]]; then
        sed -i 's/^\#HostKey \/etc\/ssh\/ssh_host_ed25519_key$/HostKey \/etc\/ssh\/ssh_host_ed25519_key/g' $SSH_CONF_SYSTEM
    else
        echo -e "\nHostKey /etc/ssh/ssh_host_ed25519_key\n" >> $SSH_CONF_SYSTEM
    fi

    #Disable DSA hostkey
    if [[ $(grep "^\HostKey /etc/ssh/ssh_host_dsa_key" < $SSH_CONF_SYSTEM |wc -l) -gt 0 ]]; then
        sed -i 's/^\HostKey \/etc\/ssh\/ssh_host_dsa_key$/\#HostKey \/etc\/ssh\/ssh_host_dsa_key/g' $SSH_CONF_SYSTEM
    fi

    #Disable ECDSA hostkey
    if [[ $(grep "^\HostKey /etc/ssh/ssh_host_ecdsa_key" < $SSH_CONF_SYSTEM |wc -l) -gt 0 ]]; then
        sed -i 's/^\HostKey \/etc\/ssh\/ssh_host_ecdsa_key$/\#HostKey \/etc\/ssh\/ssh_host_ecdsa_key/g' $SSH_CONF_SYSTEM
    fi
}

f_ssh_hard_dh_moduli() {
    if [[ ! -f /etc/ssh/moduli ]]; then
        ssh-keygen -G /etc/ssh/moduli -b 3072
    else
        awk '$5 >= 3071' /etc/ssh/moduli > /etc/ssh/moduli.safe
        mv -f /etc/ssh/moduli.safe /etc/ssh/moduli
    fi
}

f_ssh_set_configuration() {
    local default_pass_auth="yes"
    local continue
    local choice

    #ASK FOR PASSWORD AUTHENTICATION TO LOCAL USERS
    nav_breaker_bar
    echo -e "\n\n[WARNING] By default password authentication is set to \"YES\" to avoid lockout."
    echo -e "  This is \!\!NOT\!\! recommended. You can change it to \"NO\" during setup. However,"
    echo -e "  if you are not setup with SSH Public Keys for remote access, you will lock yourself"
    echo -e "  out from SSH access\!\r\n --> Choose \"YES\" to allow password authenticaiton, -OR-\n  --> Choose \"NO\" to disable password authentication"
    nav_breaker_bar
    while true; do
        read -p "Do you want to ALLOW password authentication for SSH services? (yes/no) " choice
        case $choice in
            YES|Yes|yes|Y|y)
                echo -e "\nPasswordAuthentication set to \"YES\"\n" ; default_pass_auth="yes"
                break
                ;;
            NO|No|no|N|n)
                echo -e "\nPasswordAuthentication set to \"NO\"\n" ; default_pass_auth="no"
                break
                ;;
            *) echo "Invalid input. Please enter 'yes' or 'no'." ;;
        esac
    done
    echo -e "You can change this by editing $SSH_CONF_IRONJUMP and restarting the SSH service at any time."
    read -p "Press [ENTER] to continue." continue

    #Build /etc/ssh/sshd_config.d/zz-ironjump.conf
    echo -e "Port 22" >$SSH_CONF_IRONJUMP
    echo -e "RekeyLimit 1G 1h" >>$SSH_CONF_IRONJUMP
    echo -e "LogLevel VERBOSE" >>$SSH_CONF_IRONJUMP
    echo -e "LoginGraceTime 1m" >>$SSH_CONF_IRONJUMP
    echo -e "PermitRootLogin no" >>$SSH_CONF_IRONJUMP
    echo -e "MaxAuthTries 3" >>$SSH_CONF_IRONJUMP
    echo -e "MaxSessions 15" >>$SSH_CONF_IRONJUMP
    echo -e "PubkeyAuthentication yes" >>$SSH_CONF_IRONJUMP
    echo -e "PasswordAuthentication $default_pass_auth" >>$SSH_CONF_IRONJUMP
    echo -e "PermitEmptyPasswords no" >>$SSH_CONF_IRONJUMP
    echo -e "AllowAgentForwarding no" >>$SSH_CONF_IRONJUMP
    echo -e "AllowTcpForwarding no" >>$SSH_CONF_IRONJUMP
    echo -e "GatewayPorts no" >>$SSH_CONF_IRONJUMP
    echo -e "X11Forwarding no" >>$SSH_CONF_IRONJUMP
    echo -e "PermitTTY yes" >>$SSH_CONF_IRONJUMP
    echo -e "TCPKeepAlive yes" >>$SSH_CONF_IRONJUMP
    echo -e "PermitUserEnvironment yes" >>$SSH_CONF_IRONJUMP
    echo -e "Compression no" >>$SSH_CONF_IRONJUMP
    echo -e "ClientAliveInterval 60" >>$SSH_CONF_IRONJUMP
    echo -e "ClientAliveCountMax 5" >>$SSH_CONF_IRONJUMP
    echo -e "UseDNS no" >>$SSH_CONF_IRONJUMP
    echo -e "PermitTunnel yes" >>$SSH_CONF_IRONJUMP
}

f_ssh_hard_s1() {
    #Specific hardening commands for Amazon Linux 2023
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\n" > /etc/crypto-policies/back-ends/opensshserver.config
    f_ssh_set_configuration
    systemctl restart sshd
}

f_ssh_hard_s2() {
    #Specific hardening commands for Ubuntu 24.04
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms sntrup761x25519-sha512@openssh.com,gss-curve25519-sha256-,curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256,gss-group16-sha512-,diffie-hellman-group16-sha512\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com\n\nRequiredRSASize 3072\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    systemctl restart ssh
}

f_ssh_hard_s3() {
    #Specific hardening commands for Ubuntu 22.04
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    systemctl restart ssh
}

f_ssh_hard_s4() {
    #Specific hardening commands for Ubuntu 20.04
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s5() {
    #Specific hardening commands for Ubuntu 18.04
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s6() {
    #Specific hardening commands for Ubuntu 16.04
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s7() {
    #Specific hardening commands for Ubuntu 14.04
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s8() {
    #Specific hardening commands for Ubuntu Core 18
    echo -e "\n# Only enable RSA and ED25519 host keys.\nHostKey /etc/ssh/ssh_host_rsa_key\nHostKey /etc/ssh/ssh_host_ed25519_key\n\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    service ssh reload
}

f_ssh_hard_s9() {
    #Specific hardening commands for Ubuntu Core 16
    sed -i 's/^MACs \(.*\)$/\#MACs \1/g' $SSH_CONF_SYSTEM
    echo -e "\n# Restrict MAC algorithms, as per sshaudit.com hardening guide.\nMACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    service ssh reload
}

f_ssh_hard_s10() {
    #Specific hardening commands for Debian Bookworm (Debian 12)
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\n KexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nRequiredRSASize 3072\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\n" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s11() {
    #Specific hardening commands for Debian Bullseye (Debian 11)
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s12() {
    #Specific hardening commands for Debian Buster (Debian 10)
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s13() {
    #Specific hardening commands for Rocky Linux 9
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nRequiredRSASize 3072\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\n" > /etc/crypto-policies/back-ends/opensshserver.config
    f_ssh_set_configuration
    systemctl restart sshd
}

f_ssh_hard_s14() {
    #Specific hardening commands for RHEL 8 Server / CentOS 8 Server
    cp /etc/crypto-policies/back-ends/opensshserver.config /etc/crypto-policies/back-ends/opensshserver.config.orig
    echo -e "CRYPTO_POLICY='-oCiphers=chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr -oMACs=hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com -oGSSAPIKexAlgorithms=gss-curve25519-sha256- -oKexAlgorithms=curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256 -oHostKeyAlgorithms=ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512 -oPubkeyAcceptedKeyTypes=ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512'" > /etc/crypto-policies/back-ends/opensshserver.config
    f_ssh_set_configuration
    systemctl restart sshd.service
}

f_ssh_hard_s15() {
    #Specific hardening commands for RHEL 7 Server / CentOS 7 Server
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group18-sha512,diffie-hellman-group16-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    systemctl restart sshd.service
}

f_ssh_hard_s16() {
    #Specific hardening commands for pfSense 2.4
    sed -i.bak 's/^MACs \(.*\)$/\#MACs \1/g' $SSH_CONF_SYSTEM
    echo "" | echo "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    service sshd onerestart
}

f_ssh_hard_s17() {
    #Specific hardening commands for OpenBSD 6.2 Server
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" > $SSH_ENCRYPT_CONF
    f_ssh_set_configuration
    kill -HUP `cat /var/run/sshd.pid`
}

## Deploy IronJump Root Server
f_setup_ironjump() {
    f_sshd_setup
    f_diceware_setup
    harden_ssh_service
    echo "Creating Chroot Environment."
    mkdir -p /home/ironjump/{users,servers,endpoints}/chroot
    chown -R root:root /home/ironjump
    chmod -R 755 /home/ironjump
    echo "Creating IronSync Account"
    useradd -U -m -d $IRONJUMP_CHROOT_ENV/servers/chroot/ironsync ironsync; sleep 1
    mkdir $IRONJUMP_CHROOT_ENV/servers/chroot/ironsync/.ssh
    touch $IRONJUMP_CHROOT_ENV/servers/chroot/ironsync/.ssh/authorized_keys
    chown -R ironsync:ironsync $IRONJUMP_CHROOT_ENV/servers/chroot/ironsync
    chmod 700 $IRONJUMP_CHROOT_ENV/servers/chroot/ironsync/.ssh
    chmod 600 $IRONJUMP_CHROOT_ENV/servers/chroot/ironsync/.ssh/authorized_keys
    local sync_pass=$(openssl rand -base64 64)
    echo "ironsync:"$sync_pass |chpasswd ; sleep 1
    unset sync_pass
    echo "Creating IronJump Groups."
    groupadd $IRONJUMP_SSH_GROUP
    groupadd $IRONJUMP_SRV_GROUP
    groupadd $IRONJUMP_END_GROUP
    groupadd ingot_registry
    if [[ -z $(cat /etc/sudoers |grep ingot_registry) ]]; then
        echo -e "\r\n#Sudoers entry for IronJump Automation" >>/etc/sudoers
        echo '%ingot_registry ALL=(ALL) NOPASSWD: /usr/bin/gpasswd -d * ingot_registry, /usr/bin/gpasswd -a * ironjump_endpoints, /usr/bin/chsh -s /usr/sbin/nologin *' >>/etc/sudoers
    fi

    #Add IronJump SSH Match statements to /etc/ssh/sshd_config.d/zz-ironjump.conf.
    echo "Adding groups to SSH Configuration."; sleep 1
    sed -i "/^Match Group $IRONJUMP_SSH_GROUP/,/\#END MATCH GROUP/d" $SSH_CONF_IRONJUMP
    cat << EOF >> $SSH_CONF_IRONJUMP
Match Group $IRONJUMP_SSH_GROUP
    ChrootDirectory $IRONJUMP_CHROOT_ENV/users/chroot
    ForceCommand /bin/false
    PermitTTY no
    AllowTcpForwarding yes
    GatewayPorts yes
    PermitTunnel yes
    AuthenticationMethods publickey
    PasswordAuthentication no
    Subsystem sftp none
#END MATCH GROUP
EOF
    sed -i "/^Match Group $IRONJUMP_SRV_GROUP/,/\#END MATCH GROUP/d" $SSH_CONF_IRONJUMP
    cat << EOF >> $SSH_CONF_IRONJUMP
Match Group $IRONJUMP_SRV_GROUP
    ChrootDirectory $IRONJUMP_CHROOT_ENV/servers/chroot
    ForceCommand /bin/false
    PermitTTY no
    AllowTcpForwarding yes
    GatewayPorts yes
    PermitTunnel yes
    AuthenticationMethods publickey
    PasswordAuthentication no
    Subsystem sftp none
#END MATCH GROUP
EOF
    sed -i "/^Match Group $IRONJUMP_END_GROUP/,/\#END MATCH GROUP/d" $SSH_CONF_IRONJUMP
    cat << EOF >> $SSH_CONF_IRONJUMP
Match Group $IRONJUMP_END_GROUP
    ChrootDirectory $IRONJUMP_CHROOT_ENV/endpoints/chroot
    ForceCommand /bin/false
    PermitTTY no
    AllowTcpForwarding yes
    GatewayPorts yes
    PermitTunnel yes
    AuthenticationMethods publickey
    PasswordAuthentication no
    Subsystem sftp none
#END MATCH GROUP
EOF
    sed -i "/^Match Group ingot_registry/,/\#END MATCH GROUP/d" $SSH_CONF_IRONJUMP
    cat << EOF >> $SSH_CONF_IRONJUMP
Match Group ingot_registry
    ForceCommand ~/ingot-registration.sh
    PermitTTY no
    AllowTcpForwarding no
    GatewayPorts no
    PermitTunnel no
    PasswordAuthentication yes
    Subsystem sftp none
#END MATCH GROUP
EOF
    sed -i "/^Match User ironsync/,/\#END MATCH USER/d" $SSH_CONF_IRONJUMP
    cat << EOF >> $SSH_CONF_IRONJUMP
Match User ironsync
    ForceCommand /bin/ironjump-sync.sh
    PermitTTY no
    AllowTcpForwarding no
    GatewayPorts no
    X11Forwarding no
    PermitTunnel no
    AuthenticationMethods publickey
    PasswordAuthentication no
    Subsystem sftp none
#END MATCH USER
EOF
    f_sshd_restart
    systemctl daemon-reload 2>/dev/null
    #setup /bin/ironjump-sync.sh
    cat <<EOF > /bin/ironjump-sync.sh
#!/bin/bash
ac_host_file="/home/ironjump/endpoints/chroot/\$ac_host/access_control"
if [[ -z \$ac_host ]]; then
    echo "Error: No hostname provided."
    exit 1
fi
if [[ ! -f "/home/ironjump/endpoints/chroot/\$ac_host/access_control" ]]; then
    echo "Error: File does not exist or permission denied."
    exit 1
fi
cat "\$ac_host_file"
EOF
    chown root:ironsync /bin/ironjump-sync.sh
    chmod 0750 /bin/ironjump-sync.sh
    #Final Permissions Check
    chown -R :ironsync /home/ironjump
    echo "Building cron jobs."
    read -p "Setup Complete. Press [ENTER] to continue."
}

## Install Dependencies
f_make_setup() {
    # Check if make utility is installed. Required for AutoSSH.
    case "$PKG_MANAGER" in
        "apt") apt install -y make gcc ;;
        "yum") yum install -y make gcc ;;
        "dnf") dnf install -y make gcc ;;
        "pacman") pacman -Sy --noconfirm make gcc ;;
        "pkg") pkg install -y make gcc ;;
        "pkg_add") pkg_add make gcc ;;
        *) echo "Package manager not recognized. Cannot install the make utility."; return 1 ;;
    esac
}

f_sshd_setup() {
    # Check if SSH client is installed
    case "$PKG_MANAGER" in
        "apt") apt update && apt install -y openssh-client openssh-server ssh ;;
        "yum") yum install -y openssh-clients openssh-server ssh ;;
        "dnf") dnf install -y openssh-clients openssh-server ssh;;
        "pacman") pacman -Sy --noconfirm openssh ;;
        "pkg") pkg install -y openssh ;;
        "pkg_add") pkg_add openssh ;;
        *) echo "Package manager not recognized. Cannot install SSH client."; return 1 ;;
    esac

    # Enable and start SSHD at boot
    echo "Enabling and starting SSHD..."
    case "$PKG_MANAGER" in
        "apt"|"dnf"|"yum"|"pacman")
            systemctl enable ssh 2>/dev/null || systemctl enable sshd
            systemctl restart ssh 2>/dev/null || systemctl restart sshd
            ;;
        "pkg") service sshd enable && service sshd start ;;
        "pkg_add") rcctl enable sshd && rcctl start sshd ;;
        *) echo "Service management not recognized."; return 1 ;;
    esac

    echo "SSH setup complete!"
}

f_diceware_setup(){
    # Check if Diceware is installed
    case "$PKG_MANAGER" in
        "apt") apt install -y diceware ;;
        "yum") yum install -y diceware ;;
        "dnf") dnf install -y diceware ;;
        "pacman") pacman -Syu --noconfirm python-diceware ;;
        "pkg_add") pkg_add diceware ;;
        *) echo "Package manager not recognized. Cannot install Diceware."; return 1 ;;
    esac
}

f_cron_setup() {
    # Check if cron is installed
    if ! command -v crond &> /dev/null && ! command -v cron &> /dev/null; then
        echo "Cron is not installed. Installing..."
        case "$PKG_MANAGER" in
            "apt") apt update && apt install -y cron ;;
            "yum") yum install -y cronie ;;
            "dnf") dnf install -y cronie ;;
            "pacman") pacman -Sy --noconfirm cronie ;;
            "pkg") pkg install -y cron ;;
            "pkg_add") pkg_add cron ;;
            *) echo "Package manager not recognized. Cannot install cron."; return 1 ;;
        esac
    else
        echo "Cron is already installed."
    fi

    # Enable cron at boot and start/restart the service
    echo "Enabling and starting cron..."
    case "$PKG_MANAGER" in
        "apt"|"dnf"|"yum"|"pacman")
            systemctl enable crond 2>/dev/null || systemctl enable cron
            systemctl restart crond 2>/dev/null || systemctl restart cron
            ;;
        "pkg") service cron enable && service cron start ;;
        "pkg_add") rcctl enable cron && rcctl start cron ;;
        *) echo "Service management not recognized."; return 1 ;;
    esac

    echo "Cron setup complete!"
}

view_configuration() {
    local continue
    if [[ -f $SSH_CONF_IRONJUMP ]]; then
        cat $SSH_CONF_IRONJUMP |grep -v ^$
        nav_breaker_bar
        read -p "Press [ENTER] to continue."
    else
        echo "Configuration file not found."
        nav_breaker_bar
        read -p "Press [ENTER] to continue." continue
    fi
    deployment_menu
}

mod_configuration() {
    local continue
    if [[ -f $SSH_CONF_IRONJUMP ]]; then
        vi $SSH_CONF_IRONJUMP
    else
        echo "Configuration file not found."
        nav_breaker_bar
        read -p "Press [ENTER] to continue." continue
    fi
    deployment_menu
}

harden_ssh_service() {
    f_ssh_hard_check
    f_ssh_hard_os_selection
}

usr_mgmt_list() {
    local continue
    clear
    echo "IronJump SSH Management - All Users"
    nav_top_bar
    list_users
    nav_breaker_bar
    read -p "Press [ENTER] to return to the menu." continue
    root_server_user_acct_mgmt_menu
}

usr_mgmt_new() {
    local usr_new_set_name
    local usr_new_set_comment
    local usr_set_new_pubkey
    local continue
    local choice
    clear
    echo "IronJump SSH Management - Create/Add SSH User"
    nav_top_bar
    echo -e "\nNew User Details\n----------------\n"
    read -p "   --> Username:   " usr_new_set_name
    if [[ ! -z $(cat /etc/passwd |grep $usr_new_set_name) ]]; then echo -e "\nUsername already exists. Please try again."; sleep 2; usr_mgmt_new; fi
    read -p "   --> Real Name or Nickname:  " usr_new_set_comment
    read -p "   --> SSH Pubkey {key_type key}: " usr_new_set_pubkey
    if [[ ! "$usr_new_set_pubkey" =~ ^ssh-ed25519 ]] &&	[[ ! "$usr_new_set_pubkey" =~ ^ssh-rsa ]]; then
        echo "SSH Pubkey must be ed25519 (recommended) or RSA. Aborting user creation."
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue. Returning to User Account Menu" continue
        root_server_user_acct_mgmt_menu
    else
        local key_type=$(echo $usr_new_set_pubkey | awk '{print $1}')
        local key=$(echo $usr_new_set_pubkey | awk '{print $2}')
        local ssh_key=$(echo $key_type $key $usr_new_set_name)
    fi
    echo -e "\r\nA new $usr_type user account will be created using the following: \r\n\tUsername: $usr_new_set_name \r\n\tIdentity: $usr_new_set_comment \r\n\tPublic SSH Key: $ssh_key \r\n\tExpiration: None"
    echo -e "\r\n--------------------------------------------------------"
    read -p "Press [C] to confirm or [A] to abort: " choice
    case "$choice" in
        A|a) root_server_user_acct_mgmt_menu ;;
        C|c)
            local usr_new_set_homedir="$IRONJUMP_CHROOT_ENV/users/chroot/$usr_new_set_name"
            local usr_new_set_sshdir="$usr_new_set_homedir/.ssh"
            local usr_new_set_authorized_keys="$usr_new_set_sshdir/authorized_keys"
            useradd -U -m -s $(which nologin) -d $usr_new_set_homedir -c "$usr_new_set_comment" -G $IRONJUMP_SSH_GROUP $usr_new_set_name
            mkdir -p $usr_new_set_sshdir
            echo $ssh_key > $usr_new_set_authorized_keys
            chown -R $usr_new_set_name:$usr_new_set_name $usr_new_set_sshdir
            chmod 700 "$usr_new_set_sshdir"
            chmod 600 "$usr_new_set_authorized_keys"
            ;;
        *) invalid_choice; usr_mgmt_new ;;
    esac
    echo "New user account for $usr_new_set_name created."
    echo -e "\r\n--------------------------------------------------------"
    read -p "Press [ENTER] to continue." continue
    root_server_user_acct_mgmt_menu
}

local_account_check(){
    local continue
    local account_check
    # Function requires 3 inputes when called 1) {users or endpoints} and 2) {username} and 3) menu location if error
    if [[ -z $(passwd -S $2 2>/dev/null) ]]; then
        echo -e "Account not found."
        account_check="failed"
    elif [[ ! -d /home/ironjump/$1/chroot/$2 ]]; then
        echo -e "Local accounts cannot be managed in IronJump."
        account_check="failed"
    fi

    #Redirection on error
    if [[ $account_check == "failed" ]]; then
        nav_breaker_bar
        case $3 in
            r_access_menu)
                read -p "Press [ENTER] to return to the Access Control Menu. " continue
                access_control_mgmt_menu
                ;;
            r_users_menu)
                read -p "Press [ENTER] to return to the Users Account Management Menu. " continue
                root_server_user_acct_mgmt_menu
                ;;
            r_endpoints_menu)
                read -p "Press [ENTER] to return to the Endpoint Accounts Management Menu. " continue
                root_server_endpoint_acct_mgmt_menu
                ;;
            *)
                read -p "Press [ENTER] to return to IronJump Root Menu. " continue
                root_server_mgmt_menu
                ;;
        esac
    fi
}

usr_mgmt_enable() {
    local usr_set_enable_name
    local continue
    local choice
    clear
    echo "IronJump SSH Management - Enable User Account Wizard"
    nav_top_bar
    list_users disabled
    nav_breaker_bar
    read -p "Enter a username to enable: " usr_set_enable_name
    local_account_check users $usr_set_enable_name r_users_menu
    if [[ $(list_users enabled |grep "$usr_set_enable_name" |awk '{print $1}') == "(Enabled)" ]]; then
        echo -e "$usr_set_enable_name is already enabled."
        nav_breaker_bar
        read -p "Press [ENTER] to return to the User Account Management Menu." continue
        root_server_user_acct_mgmt_menu;
    fi
    read -p "Are you sure you want to enable $usr_set_enable_name? Type [CONFIRM]: " choice
    if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
        usermod -U $usr_set_enable_name
        chage -E -1 $usr_set_enable_name
        sed -i 's/^#//' /home/ironjump/users/chroot/$usr_set_enable_name/.ssh/authorized_keys
        echo -e "\nUser $usr_set_enable_name is now enabled!"
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue." continue
        root_server_user_acct_mgmt_menu
    else
        read -p "Confirmation not given. Press [ENTER] to return to the User Account Management Menu." continue
        root_server_user_acct_mgmt_menu
    fi
}

usr_mgmt_disable() {
    local usr_set_disable_name
    local continue
    local choice
    clear
    echo "IronJump SSH Management - Disable User Account Wizard"
    nav_top_bar
    list_users enabled
    nav_breaker_bar
    read -p "Enter a username to disable: " usr_set_disable_name
    local_account_check users $usr_set_disable_name r_users_menu
    if [[ $(list_users disabled |grep "$usr_set_disable_name" |awk '{print $1}') == "(Disable)" ]]; then
        echo -e "$usr_set_disable_name is already disabled."
        nav_breaker_bar
        read -p "Press [ENTER] to return to the User Account Management Menu." continue
        root_server_user_acct_mgmt_menu;
    fi
    read -p "Are you sure you want to disable $usr_set_disable_name? Type [CONFIRM]: " choice
    if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
        usermod -L $usr_set_disable_name
        chage -E 0 $usr_set_disable_name
        sed -i 's/^#//' /home/ironjump/users/chroot/$usr_set_disable_name/.ssh/authorized_keys
        echo -e "\nUser $usr_set_enable_name is now disabled!"
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue." continue
        root_server_user_acct_mgmt_menu
    else
        read -p "Confirmation not given. Press [ENTER] to return to the User Account Management Menu." continue
        root_server_user_acct_mgmt_menu
    fi
}

usr_mgmt_delete() {
    local usr_set_delete_name
    local continue
    local choice
    clear
    echo "IronJump SSH Management - Delete User Account Wizard"
    nav_top_bar
    list_users
    nav_breaker_bar
    read -p "Enter a username to delete: " usr_set_delete_name
    local_account_check users $usr_set_delete_name r_users_menu
    read -p "Are you sure you want to delete $usr_set_delete_name? Type [CONFIRM]: " choice
    if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
        sed -i 's/^/#/' /home/ironjump/users/chroot/$usr_set_delete_name/.ssh/authorized_keys
        userdel -r $usr_set_delete_name &>/dev/null
        pkill -u $usr_set_delete_name
        echo "User $usr_set_delete_name has been deleted!"
        nav_breaker_bar
        read -p "Press [ENTER] to continue." continue
        root_server_user_acct_mgmt_menu
    else
        nav_breaker_bar
        read -p "Confirmation not given. Press [ENTER] to return to the User Account Menu." continue
        root_server_user_acct_mgmt_menu
    fi
}

usr_mgmt_mod_pubkey() {
    local usr_set_update_pubkey_name
    local usr_set_update_pubkey_key
    local
    local continue
    local choice
    clear
    echo "IronJump SSH Management - User Account Public Key Update Wizard"
    nav_top_bar
    list_users
    nav_breaker_bar
    read -p "Enter a username to modify their SSH Public Key: " usr_set_update_pubkey_name
    local_account_check users $usr_set_update_pubkey_name r_users_menu
    read -p "   --> New SSH Pubkey {key_type key}: " usr_set_update_pubkey_key
    if [[ ! "$usr_set_update_pubkey_key" =~ ^ssh-ed25519 ]] && [[ ! "$usr_set_update_pubkey_key" =~ ^ssh-rsa ]]; then
        echo "SSH Pubkeys must be ed25519 (recommended) or RSA. Aborting modification."
        nav_breaker_bar
        read -p "Press [ENTER] to continue. Returning to User Account Menu" continue
        root_server_user_acct_mgmt_menu
    else
        local key_type=$(echo $usr_set_update_pubkey_key | awk '{print $1}')
        local key=$(echo $usr_set_update_pubkey_key | awk '{print $2}')
        local ssh_key=$(echo $key_type $key $usr_set_update_pubkey_name)
    fi
    read -p "Are you sure you want to change $usr_set_delete_name's public key? Type [CONFIRM]: " choice
    if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
        echo -e "\r\nUpdating SSH Public Key for: \r\n\tUsername: $usr_set_update_pubkey_name \r\n\tPublic SSH Key: $ssh_key"
        echo $ssh_key > /home/ironjump/users/chroot/$usr_set_update_pubkey_name/.ssh/authorized_keys
        chown $usr_set_update_pubkey_name:$usr_set_update_pubkey_name /home/ironjump/users/chroot/$usr_set_update_pubkey_name/.ssh/authorized_keys
        chmod 0600 /home/ironjump/users/chroot/$usr_set_update_pubkey_name/.ssh/authorized_keys
        local access_control_path="/home/ironjump/endpoints/chroot/*/access_control"
        sed -i -E "s|^($usr_set_update_pubkey_name):[^:]+ ([^:]+):|\1:$ssh_key:|" $access_control_path
        echo -e "\nUser $usr_set_enable_name's public key has been modified!"
        nav_breaker_bar
        read -p "Press [ENTER] to continue. Returning to User Account Menu" continue
        root_server_user_acct_mgmt_menu
    else
        nav_breaker_bar
        read -p "Confirmation not given. Press [ENTER] to return to the User Account Menu." continue
        root_server_user_acct_mgmt_menu
    fi
    root_server_user_acct_mgmt_menu
}

usr_mgmt_set_expire() {
    local usr_set_expire_name
    local usr_set_expire_date
    local continue
    clear
    echo "IronJump SSH Management - Expire User Account Wizard"
    nav_top_bar
    list_users
    nav_breaker_bar
    read -p "Enter a username to set an expiration date: " usr_set_expire_name
    local_account_check users $usr_set_expire_name r_users_menu
    echo -e "To set or unset an expiration to a specify date:"
    echo -e "\t   never: Disable Expiration"
    echo -e "\t   YYYY-MM-DD: Specific date (ex. '2025-12-31' is December 31, 2025)\n"
    read -p "Please specify \"never\" or set a specific date: " usr_set_expire_date
    if [[ "$usr_set_expire_date" == "never" ]]; then
        chage -E -1 $usr_set_expire_name
        echo -e "\nUser $usr_set_expire_name is set to never expire."
        nav_breaker_bar
        read -p "Press [ENTER] to continue." continue
        root_server_user_acct_mgmt_menu
    else
        validate_date user $usr_set_expire_date
        chage -E $usr_set_expire_date $usr_set_expire_name
        echo -e "\nThe account $usr_set_expire_name will expire on $usr_set_expire_date."
        nav_breaker_bar
        read -p "Press [ENTER] to continue." continue
        root_server_user_acct_mgmt_menu
    fi
}

#dev_acct_mgmt_menu
dev_mgmt_list() {
    local continue
    clear
    echo "IronJump SSH Management - All Endpoints"
    nav_top_bar
    list_endpoints
    nav_breaker_bar
    read -p "Press [ENTER] to return to the menu." continue
    root_server_endpoint_acct_mgmt_menu
}

dev_mgmt_new() {
    local ep_new_comment
    local continue
    clear
    echo "IronJump SSH Management - New Endpoint Account Creation"
    nav_top_bar
    echo -e "Creating account for new Endpoint deployment...\n"
    while [[ -z $ep_new_comment ]]; do
        read -p "Endpoint comment/description (Ex. Location, Environment, Client):  " ep_new_comment
    done
    local ep_base="ingot-"
    #TODO [MAYBE - Ask Heather and Carlota's Opinion]: Make random number between 50000 and 59999
    local ep_num=$(ls -al /home/ironjump/endpoints/chroot |awk '{print $9}' |grep -v "^\\.\|^$" |tail -n 1 |tr -d $ep_base)
    if [[ -z $ep_num ]]; then
        ep_num="50000"
    elif [[ $(($ep_num + 1)) -gt 59999 ]]; then
        ep_num="50000"
    else
        ep_num=$(($ep_num + 1))
    fi
    local ep_account_name=$ep_base$ep_num
    #Create Endpoint Account
    local dev_new_set_homedir="$IRONJUMP_CHROOT_ENV/endpoints/chroot/$ep_account_name"
    local dev_new_set_sshdir="$dev_new_set_homedir/.ssh"
    local dev_new_set_authorized_keys="$dev_new_set_sshdir/authorized_keys"
    useradd -U -m -s $(which bash) -d $dev_new_set_homedir -c "$ep_new_comment" -G ingot_registry $ep_account_name
    mkdir -p $dev_new_set_sshdir
    touch $dev_new_set_authorized_keys
    chown -R $ep_account_name:$ep_account_name $dev_new_set_sshdir
    #Create Keys
    ssh-keygen -t ed25519 -f "$dev_new_set_sshdir/ironsync_key" -N "" -C $ep_account_name
    mv $dev_new_set_sshdir/ironsync_key $dev_new_set_homedir/ironsync_key
    cat $dev_new_set_sshdir/ironsync_key.pub >> /home/ironjump/servers/chroot/ironsync/.ssh/authorized_keys
    rm -f $dev_new_set_sshdir/ironsync_key.pub
    ssh-keygen -t ed25519 -f "$dev_new_set_sshdir/ironjump_key" -N "" -C $ep_account_name
    mv $dev_new_set_sshdir/ironjump_key $dev_new_set_homedir/ironjump_key
    mv $dev_new_set_sshdir/ironjump_key.pub $dev_new_set_sshdir/authorized_keys
    #Add to Group ingot_registry
    usermod -aG ingot_registry "$ep_account_name"
    #Generate One Time Password XXXX-XXXX-XXXX
    if [[ ! -z $(which diceware) ]]; then
        local token=$(diceware -n 3 -d "::" -r system)
    else
        local token=$(cat /dev/urandom | tr -dc 'A-Z2-79' | fold -w4 | head -n3 | paste -sd'-' -)
    fi
    echo $ep_account_name:$token | chpasswd
    #Create ingot-registration.sh, access_control, and ingot-keys files
    touch $dev_new_set_homedir/access_control
    cat <<EOF > "$dev_new_set_homedir/ingot-registration.sh"
#!/bin/bash
self_destruct="\$0"
cat ~/ingot-keys
sleep 1
rm -f ~/ingot-keys
sleep 1
sudo -n chsh -s /usr/sbin/nologin \$USER
sudo -n gpasswd -a \$USER ironjump_endpoints
sudo -n gpasswd -d \$USER ingot_registry
date > ~/registration_complete
rm -- "\$self_destruct"
EOF
    chmod +x $dev_new_set_homedir/ingot-registration.sh
    echo "ironjump_key="\"$(cat $dev_new_set_homedir/ironjump_key)\" >>$dev_new_set_homedir/ingot-keys
    echo "ironsync_key="\"$(cat $dev_new_set_homedir/ironsync_key)\" >>$dev_new_set_homedir/ingot-keys
    sleep 1
    rm -f $dev_new_set_homedir/ironjump_key
    rm -f $dev_new_set_homedir/ironsync_key
    #Set Permissions
    chown -R $ep_account_name:$ep_account_name $dev_new_set_homedir
    chmod 700 "$dev_new_set_sshdir"
    chmod 600 "$dev_new_set_authorized_keys"
    chown -R :ironsync $dev_new_set_homedir
    chown root:ironsync $dev_new_set_homedir/access_control
    chmod 0740 $dev_new_set_homedir/access_control
    #Display Username and Password Instructions
    clear
    echo "IronJump - New Endpoint Account (Credentials)"
    nav_top_bar
    echo "Username: "$ep_account_name
    echo "Password: "$token
    echo -e "\r\n!!!Write this down!!!\nThese are single use credentials for endpoint registration.\n\nAdvancing to the next screen will remove the credentials \nfrom view and they will not be shown again."
    nav_breaker_bar
    unset token
    read -p "Press ENTER to return." continue
    root_server_endpoint_account_mgmt_menu
}

dev_mgmt_enable() {
    local dev_set_enable_name
    local continue
    local choice
    clear
    echo "IronJump SSH Management - Enable Endpoint Account Wizard"
    nav_top_bar
    list_endpoints disabled
    nav_breaker_bar
    read -p "Enter an endoint account to enable: " dev_set_enable_name
    local_account_check endpoints $dev_set_enable_name r_endpoints_menu
    if [[ $(list_endpoints enabled |grep "$dev_set_enable_name" |awk '{print $1}') == "(Enabled)" ]]; then
        echo -e "$dev_set_enable_name is already enabled."
        nav_breaker_bar
        read -p "Press [ENTER] to return to the Endpoitn Account Management Menu." continue
        root_server_user_acct_mgmt_menu;
    fi
    read -p "Are you sure you want to enable $dev_set_enable_name? Type [CONFIRM]: " choice
    if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
        usermod -U $dev_set_enable_name
        chage -E -1 $dev_set_enable_name
        sed -i 's/^#//' /home/ironjump/endpoints/chroot/$dev_set_enable_name/.ssh/authorized_keys
        echo -e "\nUser $dev_set_enable_name is now enabled!"
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue." continue
        root_server_endpoint_acct_mgmt_menu
    else
        read -p "Confirmation not given. Press [ENTER] to return to the Endpoint Account Management Menu." continue
        root_server_endpoint_acct_mgmt_menu
    fi
}

dev_mgmt_disable() {
    local dev_set_disable_name
    local continue
    local choice
    clear
    echo "IronJump SSH Management - Disable Endpoints Account Wizard"
    nav_top_bar
    list_endpoints enabled
    nav_breaker_bar
    read -p "Enter an endpoint account to disable: " dev_set_disable_name
    local_account_check endpoints $dev_set_disable_name r_endpoints_menu
    if [[ $(list_endpoints disabled |grep "$dev_set_disable_name" |awk '{print $1}') == "(Disable)" ]]; then
        echo -e "$dev_set_disable_name is already disabled."
        nav_breaker_bar
        read -p "Press [ENTER] to return to the Endpoint Account Management Menu." continue
        root_server_endpoint_acct_mgmt_menu;
	fi
    read -p "Are you sure you want to disable $dev_set_disable_name? Type [CONFIRM]: " choice
    if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
        usermod -L $dev_set_disable_name
        chage -E 0 $dev_set_disable_name
        sed -i 's/^#//' /home/ironjump/endpoints/chroot/$dev_set_disable_name/.ssh/authorized_keys
        echo -e "\nUser $dev_set_enable_name is now disabled!"
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue." continue
        root_server_endpoint_acct_mgmt_menu
    else
        read -p "Confirmation not given. Press [ENTER] to return to the Endpoint Account Management Menu." continue
        root_server_endpoint_acct_mgmt_menu
    fi
}

dev_mgmt_delete() {
    local dev_set_delete_name
    local continue
    local choice
    clear
    echo "IronJump SSH Management - Delete Endpoint Account Wizard"
    nav_top_bar
    list_endpoints
    nav_breaker_bar
    read -p "Enter an endpoint to delete: " dev_set_delete_name
    local_account_check endpoints $dev_set_delete_name r_endpoints_menu
    read -p "Are you sure you want to delete $dev_set_delete_name? Type [CONFIRM]: " choice
    if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
        userdel -r $dev_set_delete_name &>/dev/null
        pkill -u $dev_set_delete_name
        rm -Rf /home/ironjump/endpoints/chroot/$dev_set_delete_name &>/dev/null
        echo "Endpoint $dev_set_delete_name has been deleted!"
        nav_breaker_bar
        read -p "Press [ENTER] to continue." continue
        root_server_endpoint_acct_mgmt_menu
    else
        nav_breaker_bar
        read -p "Confirmation not given. Press [ENTER] to return to the Endpoint Account Menu." continue
        root_server_endpoint_acct_mgmt_menu
    fi
}

dev_mgmt_mod_pubkey() {
    local dev_set_update_pubkey_name
    local dev_set_update_pubkey_key
    local continue
    local choice
    clear
    echo "IronJump SSH Management - Endpoint Account Public Key Update Wizard"
    nav_top_bar
    list_endpoints
    nav_breaker_bar
    read -p "Enter a username to modify their SSH Public Key: " dev_set_update_pubkey_name
    local_account_check endpoints $dev_set_update_pubkey_name r_endpoints_menu
    read -p "   --> New SSH Pubkey {key_type key}: " dev_set_update_pubkey_key
    if [[ ! "$dev_set_update_pubkey_key" =~ ^ssh-ed25519 ]] && [[ ! "$dev_set_update_pubkey_key" =~ ^ssh-rsa ]]; then
        echo "SSH Pubkeys must be ed25519 (recommended) or RSA. Aborting modification."
        nav_breaker_bar
        read -p "Press [ENTER] to continue. Returning to Endpoint Account Menu" continue
        root_server_endpoint_acct_mgmt_menu
    else
        local key_type=$(echo $dev_set_update_pubkey_key | awk '{print $1}')
        local key=$(echo $dev_set_update_pubkey_key | awk '{print $2}') 
        local ssh_key=$(echo $dev_type $key $dev_set_update_pubkey_name)
    fi
    read -p "Are you sure you want to change $dev_set_delete_name's public key? Type [CONFIRM]: " choice
    if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
        echo -e "\r\nUpdating SSH Public Key for: \r\n\tEndpoint: $dev_set_update_pubkey_name \r\n\tPublic SSH Key: $ssh_key"
        echo $ssh_key > /home/ironjump/endpoints/chroot/$dev_set_update_pubkey_name/.ssh/authorized_keys
        chown $dev_set_update_pubkey_name:$dev_set_update_pubkey_name /home/ironjump/endpoints/chroot/$dev_set_update_pubkey_name/.ssh/authorized_keys
        chmod 0600 /home/ironjump/endpoints/chroot/$dev_set_update_pubkey_name/.ssh/authorized_keys
        echo -e "\nUser $usr_set_enable_name's public key has been modified!"
        echo -e "\n\n WARNING: THIS DID NOT UPDATE THE PRIVATE KEY ON THE ENDPOINT.\n\n"
        nav_breaker_bar
        read -p "Press [ENTER] to continue. Returning to Endpoint Account Menu" continue
        root_server_endpoint_acct_mgmt_menu
    else
        nav_breaker_bar
        read -p "Confirmation not given. Press [ENTER] to return to the Endpoint Account Menu." continue
        root_server_endpoint_acct_mgmt_menu
    fi
    root_server_endpoint_acct_mgmt_menu
}

dev_mgmt_set_expire() {
    local dev_set_expire_name
    local dev_set_expire_date
    local continue
    clear
    echo "IronJump SSH Management - Expire Endpoint Account Wizard"
    nav_top_bar
    list_endpoints
    nav_breaker_bar
    read -p "Enter an endpoint to set an expiration date: " dev_set_expire_name
    local_account_check endpoints $dev_set_expire_name r_endpoints_menu
    echo -e "To set or unset an expiration to a specify date:"
    echo -e "\t   never: Disable Expiration"
    echo -e "\t   YYYY-MM-DD: Specific date (ex. '2025-12-31' is December 31, 2025)\n"
    read -p "Please specify \"never\" or set a specific date: " dev_set_expire_date
    if [[ "$dev_set_expire_date" == "never" ]]; then
        chage -E -1 $dev_set_expire_name
        echo -e "\nEndpoint $dev_set_expire_name is set to never expire."
        nav_breaker_bar
        read -p "Press [ENTER] to continue." continue
        root_server_endpoint_acct_mgmt_menu
    else
        validate_date endpoint $dev_set_expire_date
        chage -iE $dev_set_expire_date $dev_set_expire_name
        echo -e "\nThe account $dev_set_expire_name will expire on $dev_set_expire_date days."
        nav_breaker_bar
        read -p "Press [ENTER] to continue." continue
        root_server_endpoint_acct_mgmt_menu
    fi
}

#ep_mgmt_menu
ep_connect() {
    local ironjump_srv_ip
    local ironjump_ep_name
    local has_token
    local continue
    clear
    if [[ ! -f /opt/IronJump/autossh/configure ]]; then read -p "AutoSSH files are not in folder. Cannot deploy endpoint. See README file." continue; root_server_mgmt_menu ;fi
    clear
    echo "IronJump SSH Management : Endpoint Registration Wizard"
    nav_top_bar
    echo -e "INFO: This wizard will connect this endpoint to an\nIronJump Server. You will need the following to continue:\n  --> The IronJump Server IP Address\n  --> The endpoint account name\n  --> The one-time access password\r\n"
    nav_breaker_bar
    read -p "Press [ENTER] to continue" continue
    echo  -e "\r\n Collect Information for Registration\n"
    read -p "  -->  What is the IronJump Server IP: " ironjump_srv_ip
    read -p "  -->  What is this endpoint's name: " ironjump_ep_name
    read -p "  -->  Where you provided an SSH access password? (yes/no): " has_token
    case $has_token in
        No|no|N|n) read -p "[WARNING] You cannot proceed without a prassword." ; ep_mgmt_menu ;;
        Yes|yes|Y|y) sleep 1 ;;
        *) invalid_choice ; ep_mgmt_menu ;;
    esac
    f_sshd_setup
    f_make_setup
    f_cron_setup
    clear
    echo "IronJump SSH Management : Endpoint Registration Wizard"
    nav_top_bar
    echo -e "INFO: This endpoint will attempt registration using\nthe following information:\n    IronJump Server:\t$ironjump_srv_ip\n    Username:\t\t$ironjump_ep_name\r\n"
    nav_breaker_bar
    echo -e "When prompted, please use the one-time password for SSH.\n"
    read -p "Press [ENTER] to continue." continue
    #Sets environment variable IRONJUMP_SERVER or changes it every ep_connect registration execution.
    #Needed as environment variable for /bin/ironjump-connect.sh and /bin/ironjump-sync.sh
    if [[ -z $IRONJUMP_SERVER ]]; then
        echo -e "IRONJUMP_SERVER=$ironjump_srv_ip" >> /etc/environment
    else
        sed -i "s/^IRONJUMP_SERVER.*$/IRONJUMP_SERVER=$ironjump_srv_ip/" /etc/environment
    fi
    #Sets environment variable IRONJUMP_EP_NAME or changes it every ep_connect registration execution.
    #Needed as environment variable for /bin/ironjump-connect.sh and /bin/ironjump-sync.sh
    if [[ -z $IRONJUMP_EP_NAME ]]; then
        echo -e "IRONJUMP_EP_NAME=$ironjump_ep_name" >> /etc/environment
    else
        sed -i "s/^IRONJUMP_EP_NAME.*$/IRONJUMP_EP_NAME=$ironjump_ep_name/" /etc/environment
    fi
    source /etc/environment
    clear
    if [[ ! -d /root/.ssh ]]; then mkdir /root/.ssh; chmod 0700 /root/.ssh; fi
    ssh $IRONJUMP_EP_NAME@$IRONJUMP_SERVER |tee /root/ingot-keys
    echo "Migrating Keys"; sleep 5
    echo $IRONJUMP_EP_NAME > /etc/hostname
    #Update hosts file with new hostname; most Linux systems use the environment variable of HOST or HOSTNAME
    if [[ ! -z $HOST ]]; then sed -i "s/$HOST/$IRONJUMP_EP_NAME/g" /etc/hosts; fi
    if [[ ! -z $HOSTNAME ]]; then sed -i "s/$HOSTNAME/$IRONJUMP_EP_NAME/g" /etc/hosts; fi
    HOST=$IRONJUMP_EP_NAME
    HOSTNAME=$IRONJUMP_EP_NAME
    cat /root/ingot-keys |grep ironjump_key |cut -d '"' -f2 |sed -e 's/-\ /-\n/g' -e 's/\ -/\n-/g' >/root/.ssh/ironjump_key
    cat /root/ingot-keys |grep ironsync_key |cut -d '"' -f2 |sed -e 's/-\ /-\n/g' -e 's/\ -/\n-/g' >/root/.ssh/ironsync_key
    rm -f /root/ingot-keys
    chmod 0600 /root/.ssh/iron*_key
    cd autossh
    ./configure
    make
    make install
    cd ../
    if [[ -f /bin/ironjump-connect.sh ]]; then rm -f /bin/ironjump-connect.sh; fi
    cat <<EOF > /bin/ironjump-connect.sh
#!/bin/bash
autossh -M 0 -f -o "StrictHostKeyChecking no" -N -i /root/.ssh/ironjump_key -R $(cat /etc/hostname |cut -d '-' -f 2):localhost:22 $(cat /etc/hostname)@$IRONJUMP_SERVER
EOF
    if [[ -f /bin/ironjump-sync-.sh ]]; then rm -f /bin/ironjump-sync.sh; fi
    cat <<EOF > /bin/ironjump-sync.sh
#!/bin/bash
ac_host=\$(cat /etc/hostname) ssh -i /root/.ssh/ironsync_key -o "StrictHostKeyChecking no" -o "SendEnv ac_host" ironsync@$IRONJUMP_SERVER > /root/.ssh/access_control
sleep 5
echo -e "\r\nLast Update: \$(date)" >> /root/.ssh/access_control

#Process access control file after synchronization
ACCESS_FILE="/root/.ssh/access_control"
SUDOERS_FILE="/etc/sudoers.d/ironjump_users"
touch "\$SUDOERS_FILE"
chmod 440 "\$SUDOERS_FILE"

process_access_control(){
local username
local ssh_key
local status
local priv
local expiration
while IFS=":" read -r username ssh_key status priv expiration; do

    [[ -z "\$username" || "\$username" == "Last Update"* || "\$username" == "root" ]] && continue
    local user_exists=\$(id "\$username" &>/dev/null && echo "yes" || echo "no")
    case "\$status" in
        "Allowed")
            if [[ "\$user_exists" == "yes" ]]; then
                usermod -U "\$username" &>/dev/null
                grep -q "^\$username " "\$SUDOERS_FILE" || echo "\$username ALL=(ALL) NOPASSWD:ALL" >> "\$SUDOERS_FILE"
                echo "\$ssh_key" >> "/home/\$username/.ssh/authorized_keys"
                chmod 600 "/home/\$username/.ssh/authorized_keys"
                chown -R "\$username:\$username" "/home/\$username/.ssh"
            elif [[ "\$user_exists" == "no" ]]; then
                useradd -m -s /bin/bash "\$username"
                mkdir -p "/home/\$username/.ssh"
                chmod 700 "/home/\$username/.ssh"
                touch "/home/\$username/.ssh/authorized_keys"
                chmod 600 "/home/\$username/.ssh/authorized_keys"
                echo "\$ssh_key" > "/home/\$username/.ssh/authorized_keys"
                chown -R "\$username:\$username" "/home/\$username/.ssh"
            fi

            #Set/Remove sudoer  Privileges
            if [[ "\$priv" == "U" ]]; then sed -i "/\$username /d" \$SUDOERS_FILE; fi
            if [[ "\$priv" == "S" ]] && [[ -z \$(grep \$username \$SUDOERS_FILE) ]]; then echo "\$username ALL=(ALL) NOPASSWD:ALL" >> "\$SUDOERS_FILE"; fi


            #Set/Modify Account Expiration
            if [[ "\$expiration" == "DNE" ]]; then chage -E -1 "\$username"; else chage -iE "\$expiration" "\$username"; fi
            ;;
        "Revoked")
            if [[ "\$user_exists" == "yes" ]]; then
                usermod -L "\$username" &>/dev/null
                chage -E 0 "\$username"
                pkill -u "\$username"
                echo "" > "/home/\$username/.ssh/authorized_keys"
                chmod 600 "/home/\$username/.ssh/authorized_keys"
                sed -i "/^\$username /d" "\$SUDOERS_FILE"
            fi
            ;;
    esac
done < "\$ACCESS_FILE"
}

process_access_control
EOF
    chmod 0700 /bin/ironjump-*.sh
    chown root:root /bin/ironjump-*.sh
    sleep 3; echo "Requesting Access Control List" ; /bin/ironjump-sync.sh
    (crontab -l 2>/dev/null; echo "@reboot sleep 120 && pgrep autossh > /dev/null || /bin/ironjump-connect.sh") | crontab -
    (crontab -l 2>/dev/null; echo "*/10 * * * * pgrep autossh > /dev/null || /bin/ironjump-connect.sh") | crontab -
    (crontab -l 2>/dev/null; echo "@reboot /bin/ironjump-sync.sh") | crontab -
    (crontab -l 2>/dev/null; echo "*/5 * * * * /bin/ironjump-sync.sh") | crontab -

    read -p "The endpoint will now reboot. Press [ENTER] to continue." continue
    shutdown -r now
    ep_mgmt_menu
}

ep_force_sync(){
    local continue
    if [[ ! -f /bin/ironjump-sync.sh ]]; then
        echo "This endpoint has has not been previously connected to an IronJump server."
    else
        echo -e "\nSyncing permissions with IronJump server."
        /bin/ironjump-sync.sh
    fi
    nav_breaker_bar
    read -p "Press [ENTER] to return to Endpoint Management Menu." continue
    endpoint_dev_mgmt_menu
}

ep_smelt_device() {
    local continue
    clear
    echo "System Meltdown: Execution of Lethal Termination (S.M.E.L.T.)"
    nav_top_bar
    echo "THIS IS COMPLETE, BUT FOR DEVELOPMENT IS NOT INCLUDED ON THIS SYSTEM'S CODE."
    read -p "Function Good" continue
    ep_mgmt_menu
}

access_control_list_assignments() {
    local useranem
    local password
    local uid
    local gid
    local comment
    local home
    local shell
    local continue
    local usr
    local pubkey
    local i_stat
    local continue
    clear
    echo -e "Access Control Management - View Assignments"
    nav_top_bar
    cat /etc/passwd |sort |while IFS=: read -r username password uid gid comment home shell; do
        if [[ $(echo $home |grep "/home/ironjump/endpoints" |wc -l) -eq 1 ]]; then
            local u_stat=$(passwd -S $username |awk '{print $2}')
            if [[ $(echo $u_stat) == "P" || $(echo $u_stat) == "PS" ]]; then
                echo -e "$username (Enabled)"
                while IFS=: read -r usr pubkey i_stat; do
                    echo "    --> $usr ($i_stat)"
                done <$home/access_control
            else echo "$username (Disabled)"
            fi
        fi
    done |more
    nav_breaker_bar
    read -p "Press [ENTER] to return to Menu." continue
    access_control_mgmt_menu
}

#Access Control Management
assignments_add_by_user() {
    local assign_user
    local assign_endpoint
    local assign_priv
    local assign_set_priv
    local assign_exp
    local assign_set_exp
    local continue
    local choice
    clear
    echo -e "Access Control Management - Assign a User - Wizard"
    nav_top_bar
    echo -e "Available User Accounts:\n------------------------"
    list_users enabled
    nav_breaker_bar
    #Ask for a user account
    read -p "Please specify a user account: " assign_user

    #Check user account
    #TODO: Fix redirection on error
    local_account_check users $assign_user r_access_menu
    echo -e "\nCurrent User Assignments: $assign_user\n"
    grep -H $assign_user /home/ironjump/endpoints/chroot/*/access_control |awk -F'[:/]' '{print "    --> "$6"\n        --> "$8" ("$10":"$11":"$12")"}'
    nav_breaker_bar
    echo "1. Add or Update Assignments for User"
    echo "R. Return to Menu"
    nav_breaker_bar
    read -p "Please make a selection: " choice
    case $choice in
        1) true ;;
        R|r) access_control_mgmt_menu ;;
        *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; assignments_add_by_user ;;
    esac

    #Ask for target endpoint
    echo -e "Available endpoints:\n--------------------"
    list_endpoints enabled
    echo -e "\n"
    read -p "What endpoint should $assign_user be allowed access: " assign_endpoint

    #Check if endpoint exists
    #TODO: Fix redirection on error
    local_account_check endpoints $assign_endpoint r_access_menu

    #Ask for permission level
    unset assign_set_priv
    while [[ -z $assign_set_priv ]]; do
        read -p "  --> Should the user have sudo access? (yes/no): " assign_priv
        case $assign_priv in
            yes|YES|Yes|y) assign_set_priv="S" ;;
            no|NO|No|n) assign_set_priv="U" ;;
            *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; assignments_add_by_user ;;
        esac
    done

    #Check for user's expiration
    local assign_exp=$(chage -l $assign_user |grep "Account expires" |awk '{print $NF}')
    if [[ "$assign_exp" == "never" ]]; then assign_set_exp="DNE"; else assign_set_exp=$assign_exp; fi
    echo -e "  --> Current expiration for $assign_user is: $assign_exp"
    read -p "    --> Set/Modify user's expiration for this specific endpoint? (yes/no) " choice
    case $choice in
        YES|Yes|yes|Y|y)
            echo -e "\nTo set or unset an expiration to a specify date:"
            echo -e "\t   never: Disable Expiration"
            echo -e "\t   YYYY-MM-DD: Specific date (ex. '2025-12-31' is December 31, 2025)\n"
            read -p "Please specify \"never\" (DNE) or set a specific date: " assign_exp
            if [[ "$assign_exp" == "never" ]]; then
                assign_set_exp="DNE"
                nav_breaker_bar
            else
                validate_date assignment $assign_exp
                assign_set_exp=$assign_exp
                nav_breaker_bar
            fi
            ;;
        NO|No|no|N|n) echo -e "Expiration set to: $assign_set_exp" ;;
        *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." ; assignments_add_by_user ;;
    esac

    #Delete any pre-existing access control entries for user on endpoint before setting/resetting
    sed -i "/$assign_user/d" /home/ironjump/endpoints/chroot/$assign_endpoint/access_control

    #Build access control string and put in access_control file of target endpoint
    echo -e "$assign_user:$(cat /home/ironjump/users/chroot/$assign_user/.ssh/authorized_keys):Allowed:$assign_set_priv:$assign_set_exp" >>/home/ironjump/endpoints/chroot/$assign_endpoint/access_control
    echo -e "\nUser $assign_user Allowed Access to $assign_endpoint."
    if [[ "$assign_set_priv" == "S" ]]; then
        echo "User will have root-level access privileges."
    else
        echo "User will have not have elevated privileges."
    fi
    echo -e "User's access to $assign_endpoint set to: $assign_set_exp"
    echo -e "\nNote: Changes may take up to 5 minutes."
    nav_breaker_bar
    read -p "Press [ENTER] to return to Access Control Menu" continue
    access_control_mgmt_menu
}

assignments_add_by_endpoint() {
    local assign_endpoint
    local assign_user
    local assign_priv
    local assign_set_priv
    local assign_exp
    local assign_set_exp
    local continue
    local choice
    clear
    echo -e "Access Control Management - Assign a User - Wizard"
    nav_top_bar
    #Ask for target endpoint
    echo -e "Available endpoints:\n--------------------"
    list_endpoints enabled
    echo -e "\n"
    read -p "Please specify an endpoint: " assign_endpoint

    #Check if endpoint exists
    #TODO: Fix redirection on error
    local_account_check endpoints $assign_endpoint r_access_menu

    echo -e "Currently Assigned User Account: $assign_endpoint\n------------------------\n"
    cat /home/ironjump/endpoints/chroot/$assign_endpoint/access_control |awk '{print "    --> "$1" ("$3":"$4":"$5")"}'

    #Ask for a user account
    echo -e "Available users:\n--------------------"
    list_users enabled
    echo -e "\n"
    read -p "Please specify a user account: " assign_user

    #Check user account
    #TODO: Fix redirection on error
    local_account_check users $assign_user r_access_menu
    nav_breaker_bar
    echo "1. Add User Account or Update Exiting Assignments for User"
    echo "R. Return to Menu"
    nav_breaker_bar
    read -p "Please make a selection: " choice
    case $choice in
        1) true ;;
        R|r) access_control_mgmt_menu ;;
        *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; assignments_add_by_endpoint ;;
    esac

    #Ask for permission level
    unset assign_set_priv
    while [[ -z $assign_set_priv ]]; do
        read -p "  --> Should the user have sudo access? (yes/no): " assign_priv
        case $assign_priv in
            yes|YES|Yes|y) assign_set_priv="S" ;;
            no|NO|No|n) assign_set_priv="U" ;;
            *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; assignments_add_by_endpoint ;;
        esac
    done

    #Check for user's expiration
    assign_exp=$(chage -l $assign_user |grep "Account expires" |awk '{print $NF}')
    if [[ "$assign_exp" == "never" ]]; then assign_set_exp="DNE"; else assign_set_exp=$assign_exp; fi
    echo -e "  --> Current expiration for $assign_user is: $assign_exp"
    read -p "    --> Set/Modify user's expiration for this specific endpoint? (yes/no) " choice
    case $choice in
        YES|Yes|yes|Y|y)
            echo -e "\nTo set or unset an expiration to a specify date:"
            echo -e "\t   never: Disable Expiration"
            echo -e "\t   YYYY-MM-DD: Specific date (ex. '2025-12-31' is December 31, 2025)\n"
            read -p "Please specify \"never\" (DNE) or set a specific date: " assign_exp
            if [[ "$assign_exp" == "never" ]]; then
                assign_set_exp="DNE"
                nav_breaker_bar
            else
                validate_date assignment $assign_exp
                assign_set_exp=$assign_exp
                nav_breaker_bar
            fi
            ;;
        NO|No|no|N|n) echo -e "Expiration set to: $assign_set_exp" ;;
        *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." ; assignments_add_by_endpoint ;;
    esac

    #Delete any pre-existing access control entries for user on endpoint before setting/resetting
    sed -i "/$assign_user/d" /home/ironjump/endpoints/chroot/$assign_endpoint/access_control

    #Build access control string and put in access_control file of target endpoint
    echo -e "$assign_user:$(cat /home/ironjump/users/chroot/$assign_user/.ssh/authorized_keys):Allowed:$assign_set_priv:$assign_set_exp" >>/home/ironjump/endpoints/chroot/$assign_endpoint/access_control
    echo -e "\nUser $assign_user Allowed Access to $assign_endpoint."
    if [[ "$assign_set_priv" == "S" ]]; then
        echo "User will have root-level access privileges."
    else
        echo "User will have not have elevated privileges."
    fi
    echo -e "User's access to $assign_endpoint set to: $assign_set_exp"
    echo -e "\nNote: Changes may take up to 5 minutes."
    nav_breaker_bar
    read -p "Press [ENTER] to return to Access Control Menu" continue
    access_control_mgmt_menu
}

assignments_revoke_by_user() {
    local assign_user
    local assign_endpoint
    local continue
    local choice
    clear
    echo -e "Access Control Management - Revoke a User - Wizard"
    nav_top_bar
    echo -e "Available User Accounts:\n------------------------"
    list_users enabled
    nav_breaker_bar
    #Ask for a user account
    read -p "Please specify a user account: " assign_user

    #Check user account
    #TODO: Fix redirection on error
    local_account_check users $assign_user r_access_menu
    echo -e "\nCurrent User Assignments: $assign_user\n"
    grep -H $assign_user /home/ironjump/endpoints/chroot/*/access_control |awk -F'[:/]' '{print "    --> "$6"\n        --> "$8" ("$10":"$11":"$12")"}'
    echo -e "\n"
    nav_breaker_bar
    echo "1. Revoke Assignments for User"
    echo "2. Revoke ALL Assignments for User"
    echo "R. Return to Menu"
    nav_breaker_bar
    read -p "Please make a selection: " choice
    case $choice in
        1)
            echo -e "\n"
            read -p "What endpoint should $assign_user be revoked from: " assign_endpoint

            #Check if endpoint exists
            #TODO: Fix redirection on error
            local_account_check endpoints $assign_endpoint r_access_menu

            #Prompt for confirmation
            echo -e "\nUser $assign_user will be revoked from endpoint $assign_endpoint."
            nav_breaker_bar
            read -p "Press [C] to confirm or [A] to abort: " choice
            case $choice in
                C|c)
                    sed -i "/$assign_user:/s/:Allowed:.*$/:Revoked:U:$(date +%Y-%m-%d)/" /home/ironjump/endpoints/chroot/$assign_endpoint/access_control
                    echo -e "\nRevocation complete.\nNote: Changes may take up to 5 minutes."
                    nav_breaker_bar
                    read -p "Press [ENTER] to return to Access Control Menu" continue
                    access_control_mgmt_menu
                    ;;
                A|a) read -p "Aborting revocation. Returning to Access Control Menu." continue ; access_control_mgmt_menu ;;
                *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; assignments_revoke_by_user ;;
            esac
            ;;
        2)
            echo -e "\nUser $assign_user will be revoked on ALL currently assigned hosts."
            nav_breaker_bar
            read -p "Press [C] to confirm or [A] to abort: " choice
            case $choice in
                C|c)
                    find /home/ironjump/endpoints/chroot/ -type f -name "access_control" -exec sed -i "/^$assign_user:/s/:Allowed:.*$/:Revoked:U:$(date +%Y-%m-%d)/" {} +
                    nav_breaker_bar
                    read -p "Revocation complete. Press [ENTER] to retun to Access Control Menu." continue
                    access_control_mgmt_menu
                    ;;
                A|a)
                    echo -e "\nAborting revocation. Returning to Access Control Menu."
                    nav_breaker_bar
                    read -p "Press [ENTER] to return to Access Control Menu." continue
                    access_control_mgmt_menu
                    ;;
                *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; assignments_revoke_by_user ;;
            esac
            ;;
        R|r) access_control_mgmt_menu ;;
        *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; assignments_revoke_by_user ;;
    esac
}

assignments_revoke_by_endpoint() {
    local assign_user
    local assign_endpoint
    local continue
    local choice
    clear
    echo -e "Access Control Management - Revoke a User - Wizard"
    nav_top_bar
    #Ask for target endpoint
    echo -e "Available endpoints:\n--------------------"
    list_endpoints enabled
    echo -e "\n"
    read -p "Please specify an endpoint: " assign_endpoint

    #Check if endpoint exists
    #TODO: Fix redirection on error
    local_account_check endpoints $assign_endpoint r_access_menu

    echo -e "Currently Assigned User Account: $assign_endpoint\n------------------------\n"
    cat /home/ironjump/endpoints/chroot/$assign_endpoint/access_control |awk '{print "    --> "$1" ("$3":"$4":"$5")"}'

    echo -e "\n"
    read -p "Please specify a user account: " assign_user

    #Check user account
    #TODO: Fix redirection on error
    local_account_check users $assign_user r_access_menu
    nav_breaker_bar
    echo "1. Revoke Assignments for User"
    echo "2. Revoke Assignments for ALL Users"
    echo "R. Return to Menu"
    nav_breaker_bar
    read -p "Please make a selection: " choice
    case $choice in
        1)
            #Prompt for confirmation
            echo -e "\nUser $assign_user will be revoked from endpoint $assign_endpoint."
            nav_breaker_bar
            read -p "Press [C] to confirm or [A] to abort: " choice
            case $choice in
                C|c)
                    sed -i "/$assign_user:/s/:Allowed:.*$/:Revoked:U:$(date +%Y-%m-%d)/" /home/ironjump/endpoints/chroot/$assign_endpoint/access_control
                    echo -e "\nRevocation complete.\nNote: Changes may take up to 5 minutes."
                    nav_breaker_bar
                    read -p "Press [ENTER] to return to Access Control Menu" continue
                    access_control_mgmt_menu
                    ;;
                A|a) read -p "Aborting revocation. Returning to Access Control Menu." continue ; access_control_mgmt_menu ;;
                *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; assignments_revoke_by_endpoint ;;
            esac
            ;;
        2)
            #Prompt for confirmation
            echo -e "\nALL users will be revoked from endpoint $assign_endpoint."
            nav_breaker_bar
            read -p "Press [C] to confirm or [A] to abort: " choice
            case $choice in
                C|c)
                    sed -i 's/:Allowed:.*$/:Revoked:U:$(date +%Y-%m-%d)/g' /home/ironjump/endpoints/chroot/$assign_endpoint/access_control
                    echo -e "\nRevocation complete.\nNote: Changes may take up to 5 minutes."
                    nav_breaker_bar
                    read -p "Press [ENTER] to return to Access Control Menu" continue
                    access_control_mgmt_menu
                    ;;
                A|a)
                    echo -e "\nAborting revocation. Returning to Access Control Menu."
                    nav_breaker_bar
                    read -p "Press [ENTER] to return to Access Control Menu" continue
                    access_control_mgmt_menu
                    ;;
                *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; assignments_revoke_by_endpoint ;;
            esac
            ;;
        R|r) access_control_mgmt_menu ;;
        *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; assignments_revoke_by_endpoint ;;
    esac
}

access_control_mass_assignments(){
    local assign_user
    local assign_priv
    local assign_set_priv
    local assign_exp
    local assign_set_exp
    local continue
    local choice
    clear
    echo -e "Access Control Management - Mass Assignment - Wizard"
    nav_top_bar
    echo -e "Available User Accounts:\n------------------------"
    list_users enabled
    nav_breaker_bar
    #Ask for a user account
    read -p "Please specify a user account: " assign_user

    #Check user account
    #TODO: Fix redirection on error
    local_account_check users $assign_user r_access_menu
    nav_breaker_bar
    echo "1. Allow User Access to ALL Endpoints"
    echo "2. Revoke User Access from ALL Endpoints"
    echo "R. Return to Menu"
    nav_breaker_bar
    read -p "Please make a selection: " choice
    case $choice in
        1)
            #Prompt for confirmation
            echo -e "\nUser $assign_user will be allowed to access ALL endpoint."
            nav_breaker_bar
            read -p "Press [C] to confirm or [A] to abort: " choice
            case $choice in
                C|c)
                    #Ask for permission level
                    unset assign_set_priv
                    while [[ -z $assign_set_priv ]]; do
                        read -p "  --> Should the user have sudo access? (yes/no): " assign_priv
                        case $assign_priv in
                            yes|YES|Yes|y) assign_set_priv="S" ;;
                            no|NO|No|n) assign_set_priv="U" ;;
                            *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; access_control_mass_assignments ;;
                        esac
                    done

                    #Check for user's expiration
                    assign_exp=$(chage -l $assign_user |grep "Account expires" |awk '{print $NF}')
                    if [[ "$assign_exp" == "never" ]]; then assign_set_exp="DNE"; else assign_set_exp=$assign_exp; fi
                    echo -e "  --> Current expiration for $assign_user is: $assign_exp"
                    read -p "    --> Set/Modify user's expiration for this specific endpoint? (yes/no) " choice
                    case $choice in
                        YES|Yes|yes|Y|y)
                            echo -e "\nTo set or unset an expiration to a specify date:"
                            echo -e "\t   never: Disable Expiration"
                            echo -e "\t   YYYY-MM-DD: Specific date (ex. '2025-12-31' is December 31, 2025)\n"
                            read -p "Please specify \"never\" (DNE) or set a specific date: " assign_exp
                            if [[ "$assign_exp" == "never" ]]; then
                                assign_set_exp="DNE"
                                nav_breaker_bar
                            else
                                validate_date assignment $assign_exp
                                assign_set_exp=$assign_exp
                                nav_breaker_bar
                            fi
                            ;;
                        NO|No|no|N|n) echo -e "Expiration set to: $assign_set_exp" ;;
                        *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; access_control_mass_assignments ;;
                    esac

                    #Delete any pre-existing access control entries for user on endpoint before setting/resetting
                    find /home/ironjump/endpoints/chroot/* -type f -name "access_control" -exec sed -i "/$assign_user/d" {} +

                    #Build access control string and put in access_control file of ALL endpoint
                    for file in /home/ironjump/endpoints/chroot/*/access_control; do
                        echo -e "$assign_user:$(cat /home/ironjump/users/chroot/$assign_user/.ssh/authorized_keys):Allowed:$assign_set_priv:$assign_set_exp" >> $file
                    done
                    echo -e "\nMass assignment complete. User $assign_user Allowed Access to ALL endpoints."
                    if [[ "$assign_set_priv" == "S" ]]; then
                        echo "User will have root-level access privileges."
                    else
                        echo "User will have not have elevated privileges."
                    fi
                    echo -e "\nMass assignment complete.\nNote: Changes may take up to 5 minutes."
                    nav_breaker_bar
                    read -p "Press [ENTER] to return to Access Control Menu" continue
                    access_control_mgmt_menu
                    ;;
                A|a)
                    echo -e "\nAborting mass assignment. Returning to Access Control Menu."
                    nav_breaker_bar
                    read -p "Press [ENTER] to return to Access Control Menu" continue
                    access_control_mgmt_menu
                    ;;
                *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; access_control_mass_assignments ;;
            esac
            ;;
        2)
            #Prompt for confirmation
            echo -e "\nUser $assign_user will be revoked from ALL endpoint."
            nav_breaker_bar
            read -p "Press [C] to confirm or [A] to abort: " choice
            case $choice in
                C|c)
                    find /home/ironjump/endpoints/chroot/* -type f -name "access_control" -exec sed -i "/^$assign_user:/s/:Allowed:.*$/:Revoked:U:$(date +%Y-%m-%d)/" {} +
                    echo -e "\nMass Revocation complete.\nNote: Changes may take up to 5 minutes."
                    nav_breaker_bar
                    read -p "Press [ENTER] to return to Access Control Menu" continue
                    access_control_mgmt_menu
                    ;;
                A|a)
                    echo -e "\nAborting mass revocation. Returning to Access Control Menu."
                    nav_breaker_bar
                    read -p "Press [ENTER] to return to Access Control Menu" continue
                    access_control_mgmt_menu
                    ;;
                *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; access_control_mass_assignments ;;
            esac
            ;;
        R|r) access_control_mgmt_menu ;;
        *) invalid_choice ; read -p "Starting over. Press [ENTER] to continue." continue ; access_control_mass_assignments ;;
    esac
}

access_controll_revoke_all_assignments(){
    local continue
    local choice
    clear
    echo -e "Access Control Management - Revoke ALL Assignments - Wizard"
    nav_top_bar
    echo -e "\n\n[WARNING] This will revoke ALL users assignments from ALL endpoints.\n\n"
    echo -e "  --> Do you need a hug?\n  --> If you are in distress, blink twice.\n  --> Maybe you could try counting to 10 before continuing.\n  --> Should I call a crisis counselor or just let you work through this?\n"
    nav_breaker_bar
    read -p "Type [CONFIRM]: " choice
    if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
        find /home/ironjump/endpoint/chroot/* -type f -name "access_control" -exec sed -i 's/:Allowed:.*$/:Revoked:U:$(date +%Y-%m-%d)/g' {} +
        echo -e "\nMass revocation complete. All users revoked from ALL endpoints."
        nav_breaker_bar
        read -p "Press [ENTER] to return to Access Control Management." continue
        access_control_mgmt_menu
    else
        read -p "Confirmation not given. Press [ENTER] to return to the User Access Control Menu." continue
        access_control_mgmt_menu
    fi
}

ssh_monitor() {
    local pid
    local user
    local remote_ip
    local port
    trap main_menu INT
    while true; do
        clear
        echo "SSH Connection Monitor - $(date)"
        nav_top_bar

        # Display current SSH connections with details (IPs, users, and ports)
        printf "%-15s %-20s %-10s %-10s\n" "USER" "REMOTE_IP" "PORT" "PID"
        lsof -iTCP -sTCP:ESTABLISHED -n | grep sshd | while read -r line; do
            pid=$(echo "$line" | awk '{print $2}')
            user=$(ps -o user= -p "$pid")
            remote_ip=$(echo "$line" | awk '{print $9}' | cut -d '>' -f 2 | cut -d ':' -f 1)
            port=$(echo "$line" | awk '{print $9}' | cut -d '>' -f 2 | cut -d ':' -f 2)
            printf "%-15s %-20s %-10s %-10s\n" "$user" "$remote_ip" "$port" "$pid" |grep -v root
        done

        # Add a separator for readability
        echo "--------------------------------------------"
        echo "RAW VIEW"
        echo "--------------------------------------------"
        lsof -i -n -P |grep ssh |grep -v "root\|7u \|8u "
        echo "--------------------------------------------"
        echo "[Press Ctrl+C to Return to Main Menu]"
        # Sleep for 3 seconds before refreshing
        sleep 3
    done
}

validate_date_redirection_on_error(){
    local continue
    read -p "Exiting function to preserve integrity. Press [ENTER] to continue." continue
    case $1 in
        user) usr_mgmt_set_expire ;;
        endpoint) dev_mgmt_set_expire ;;
        assignment) access_control_mgmt_menu ;;
        *) echo "Validate Date function incorrectly called. Returning to Main Menu"; sleep 5; root_server_mgmt_menu ;;
    esac
}

validate_date_error(){
    echo -e "[ERROR] Year must be between 2025 and 2125."
    echo -e "[ERROR] Month must 01 through 12."
    echo -e "[ERROR] Day number must be within the requested day. (Ex. There is no Feb 31st.)"
    echo -e "[ERROR] The date must be in the future."
    echo -e "[ERROR] Invalid date entered."
}

validate_date() {
    local read_input_date
    local year
    local month
    local day
    local days_in_month
    local input_date
    local today_day
# NOTE: Requires two inputs when called "{user or endpoint or assignment}" and "date in formate YYYY-MM-YY" for confirmation and navigation upon error.
    read_input_date=$2
    if ! [[ "$read_input_date" =~ ^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$ ]]; then
        nav_breaker_bar
        validate_date_error
        validate_date_redirection_on_error $1
    fi
    year=${read_input_date:0:4}
    month=${read_input_date:5:2}
    day=${read_input_date:8:2}
    if (( year < 2025 || year > 2125 )); then
        nav_breaker_bar
        validate_date_error
        validate_date_redirection_on_error $1
    fi
    case "$month" in
        01|03|05|07|08|10|12) days_in_month=31 ;;  # Months with 31 days
        04|06|09|11) days_in_month=30 ;;           # Months with 30 days
        02) # February, check for leap year
            if (( (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0) )); then
                days_in_month=29  # Leap year
            else
                days_in_month=28  # Non-leap year
            fi
            ;;
        *)
            nav_breaker_bar
            validate_date_error
            validate_date_redirection_on_error $1
            ;;
    esac
    if (( day > days_in_month )); then
        nav_breaker_bar
        validate_date_error
        validate_date_redirection_on_error $1
    fi
    input_date=$(date -d $read_input_date +%s 2>/dev/null)
    today_date=$(date +%s)
    if [[ -z "$input_date" ]]; then
        nav_breaker_bar
        validate_date_error
        validate_date_redirection_on_error $1
    fi
    if [[ "$input_date" -le "$today_date" ]]; then
        nav_breaker_bar
        validate_date_error
        validate_date_redirection_on_error $1
    fi
    return
}
