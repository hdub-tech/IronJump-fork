#!/bin/bash
## NAVIGATION Functions

ast_reboot() {
    echo -e "\r\nAre you sure you want to reboot the server?"
    prompt_reboot
}

prompt_reboot() {
    #TBD - Implemnet Reboot Instead of Exit
    read -p "(C)ontinue or (R)eturn: " prompt_response
    case "$prompt_response" in
        C|c) echo -e "\r\n\tRebooting server in 10 seconds... Press Ctrl+C to halt reboot." ; sleep 10 ; exit 0 ;;
        R|r) echo -e "\r\nReturning to Main Menu..." ; sleep 1 ; main_menu ;;
        *) invalid_choice ; prompt_reboot ;;
    esac
}

invalid_choice() {
    echo -e "\r\nInvalid Choice, try again...\r\n"
    sleep 1
    return 0
}


## IRONJUMP FUNCTIONS (Alphabetical Order)
f_ssh_hard_os_selection() {
    clear
    echo "Select the operating system to perform SSH hardening..."
    nav_top
    echo "1. Amazon Linux 2023"
    echo "2. Ubuntu 24.04, Mint 22"
    echo "3. Ubuntu 22.04, Kali 2024, Parrot, ParrotSec 6.2"
    echo "4. Ubuntu 20.04"
    echo "5. Ubuntu 18.04"
    echo "6. Ubuntu 16.04"
    echo "7. Ubuntu 14.04"
    echo "8. Ubuntu Core 18"
    echo "9. Ubuntu Core 16"
    echo "10. Debian Bookworm (Debian 12), Raspberry Pi OS"
    echo "11. Debian Bullseye (Debian 11)"
    echo "12. Debian Buster (Debian 10)"
    echo "13. Rocky Linux 9"
    echo "14. RHEL 8 Server / CentOS 8 Server"
    echo "15. RHEL 7 Server / CentOS 7 Server"
    echo "16. pfSense 2.4"
    echo "17. OpenBSD 6.2 Server"
    nav_foot
    case "$choice" in
        1) f_ssh_hard_os_selection ;;
        #1) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s1 ; main_menu ;;
        #2) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s2 ; main_menu ;;
        3) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s3 ; main_menu ;;
        #4) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s4 ; main_menu ;;
        #5) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s5 ; main_menu ;;
        #6) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s6 ; main_menu ;;
        #7) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s7 ; main_menu ;;
        #8) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s8 ; main_menu ;;
        #9) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s9 ; main_menu ;;
        #10) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s10 ; main_menu ;;
        #11) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s11 ; main_menu ;;
        #12) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s12 ; main_menu ;;
        #13) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s13 ; main_menu ;;
        #14) f_ssh_hard_regen_hostkeys_2 ; f_ssh_hard_s14 ; main_menu ;;
        #15) f_ssh_hard_regen_hostkeys_3 ; f_ssh_hard_s15 ; main_menu ;;
        #16) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s16 ; main_menu ;;
        #17) f_ssh_hard_regen_hostkeys_1 ; f_ssh_hard_s17 ; main_menu ;;
        R|r) ast_reboot ;;
        P|p) main_menu ;;
        Q|q) exit 0 ;;
        *) invalid_choice ; f_ssh_hard_os_selection ;;
    esac
}

f_ssh_hard_check() {
    if [[ -f $SSH_CONFIG_FILE ]]; then
        echo -e "\r\n\tFound SSH Configuration File"
        echo -e "\tWould you like to make a backup? (RECOMMENDED)"
        echo -e "\t-------------------"
        read -p "Enter your choice: " choice
        case "$choice" in
            Yes|yes|Y|y) echo -e "\r\n\tMaking backup..." ; cp $SSH_CONFIG_FILE $SSH_CONFIG_BACKUP ;;
            No|no|N|n) echo -e "\r\n\tSkipping backup..." ;;
            *) invalid_choice ; sleep 1 ; f_ssh_hard_check ;; 
        esac
        sleep 1
    else
        echo -e "\r\n\tSSH Config File Not Found. Returning to Main Menu." ; sleep 1 ; main_menu
    fi
}

f_ssh_hard_regen_hostkeys_1() {
    if [[ -f /etc/ssh/ssh_host_rsa_key && -f /etc/ssh/ssh_host_ed25519_key ]]; then
        echo -e "\r\n\tSSH host keys for RSA and ED25519 currently exist.\r\n\tDo you want to regenerate the keys? (y/n)"
        echo -e "\t\t- If this is the first time: Recommendation = yes"
        echo -e "\t\t- If this is a modification of SSH settings: Recommendation = no"
        echo -e "\t-------------------"
        read -p "Enter your choice: " choice
    else
        choice="y"
    fi
    case "$choice" in
        Yes|yes|Y|y)
            {
                rm -f /etc/ssh/ssh_host_*
                ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N ""
                ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ""
                f_ssh_hard_set_hostkeys
                f_ssh_hard_dh_moduli
            }
            ;;
        No|no|N|n) return 0 ;;
        *) invalid_choice ; f_ssh_hard_regen_hostkeys_1 ;;
    esac
}

f_ssh_hard_regen_hostkeys_2() {
    f_ssh_hard_regen_hostkeys_1
    chgrp ssh_keys /etc/ssh/{ssh_host_ed25519_key,ssh_host_rsa_key}
    chmod g+r etc/ssh/{ssh_host_ed25519_key,ssh_host_rsa_key}
}

f_ssh_hard_regen_hostkeys_3() {
    local ssh_audit_conf="/etc/systemd/system/sshd-keygen.service.d/ssh-audit.conf"
    f_ssh_hard_regen_hostkeys_1
    mkdir -p /etc/systemd/system/sshd-keygen.service.d
    echo "[Unit]" > $ssh_audit_conf
    echo "ConditionFileNotEmpty=" >> $ssh_audit_conf
    echo "ConditionFileNotEmpty=!/etc/ssh/ssh_host_ed25519_key" >>$ssh_audit_conf
    systemctl daemon-reload
    f_ssh_hard_regen_hostkeys_2
}

f_ssh_hard_set_hostkeys() {
    #Enable RSA hostkey
    if [[ $(grep "^\#HostKey /etc/ssh/ssh_host_rsa_key" < $SSH_CONFIG_FILE |wc -l) -gt 0 ]]; then
        sed -i 's/^\#HostKey \/etc\/ssh\/ssh_host_rsa_key$/HostKey \/etc\/ssh\/ssh_host_rsa_key/g' $SSH_CONFIG_FILE
    else
        echo -e "\nHostKey /etc/ssh/ssh_host_rsa_key\n" >> $SSH_CONFIG_FILE
    fi

    #Enable ED25519 hostkey
    if [[ $(grep "^\#HostKey /etc/ssh/ssh_host_ed25519_key" < $SSH_CONFIG_FILE |wc -l) -gt 0 ]]; then
        sed -i 's/^\#HostKey \/etc\/ssh\/ssh_host_ed25519_key$/HostKey \/etc\/ssh\/ssh_host_ed25519_key/g' $SSH_CONFIG_FILE
    else
        echo -e "\nHostKey /etc/ssh/ssh_host_ed25519_key\n" >> $SSH_CONFIG_FILE
    fi

    #Disable DSA hostkey
    if [[ $(grep "^\HostKey /etc/ssh/ssh_host_dsa_key" < $SSH_CONFIG_FILE |wc -l) -gt 0 ]]; then
        sed -i 's/^\HostKey \/etc\/ssh\/ssh_host_dsa_key$/\#HostKey \/etc\/ssh\/ssh_host_dsa_key/g' $SSH_CONFIG_FILE
    fi

    #Disable ECDSA hostkey
    if [[ $(grep "^\HostKey /etc/ssh/ssh_host_ecdsa_key" < $SSH_CONFIG_FILE |wc -l) -gt 0 ]]; then
        sed -i 's/^\HostKey \/etc\/ssh\/ssh_host_ecdsa_key$/\#HostKey \/etc\/ssh\/ssh_host_ecdsa_key/g' $SSH_CONFIG_FILE
    fi
}

f_ssh_hard_dh_moduli() {
    if [[ ! -f /etc/ssh/moduli ]]; then
        ssh-keygen -G /etc/ssh/moduli -b 3072
    else
        awk '$5 >= 3071' /etc/ssh/moduli > /etc/ssh/moduli.safe
        mv -f /etc/ssh/moduli.safe /etc/ssh/moduli
    fi
}

f_ssh_set_configuration() {
    sed -i "s/^\#Port .*$\|^Port .*$/Port $SSH_Port/" $SSH_CONFIG_FILE
    sed -i "s/^\#RekeyLimit .*$\|^RekeyLimit .*$/RekeyLimit $SSH_RekeyLimit/" $SSH_CONFIG_FILE
    sed -i "s/^\#LogLevel .*$\|^LogLevel .*$/LogLevel $SSH_LogLevel/" $SSH_CONFIG_FILE
    sed -i "s/^\#LoginGraceTime .*$\|^LoginGraceTime .*$/LoginGraceTime $SSH_LoginGraceTime/" $SSH_CONFIG_FILE
    sed -i "s/^\#MaxAuthTries .*$\|^MaxAuthTries .*$/MaxAuthTries $SSH_MaxAuthTries/" $SSH_CONFIG_FILE
    sed -i "s/^\#MaxSessions .*$\|^MaxSessions .*$/MaxSessions $SSH_MaxSessions/" $SSH_CONFIG_FILE
    sed -i "s/^\#PermitRootLogin .*$\|^PermitRootLogin .*$/PermitRootLogin $SSH_PermitRootLogin/" $SSH_CONFIG_FILE
    sed -i "s/^\#PubkeyAuthentication .*$\|^PubkeyAuthentication .*$/PubkeyAuthentication $SSH_PubkeyAuthentication/" $SSH_CONFIG_FILE
    sed -i "s/^\#PasswordAuthentication .*$\|^PasswordAuthentication .*$/PasswordAuthentication $SSH_PasswordAuthentication/" $SSH_CONFIG_FILE
    sed -i "s/^\#PermitEmptyPasswords .*$\|^PermitEmptyPasswords .*$/PermitEmptyPasswords $SSH_PermitEmptyPasswords/" $SSH_CONFIG_FILE
    sed -i "s/^\#AllowAgentForwarding .*$\|^AllowAgentForwarding .*$/AllowAgentForwarding $SSH_AllowAgentForwarding/" $SSH_CONFIG_FILE
    sed -i "s/^\#AllowTcpForwarding .*$\|^AllowTcpForwarding .*$/AllowTcpForwarding $SSH_AllowTcpForwarding/" $SSH_CONFIG_FILE
    sed -i "s/^\#GatewayPorts .*$\|^GatewayPorts .*$/GatewayPorts $SSH_GatewayPorts/" $SSH_CONFIG_FILE
    sed -i "s/^\#X11Forwarding .*$\|^X11Forwarding .*$/X11Forwarding $SSH_X11Forwarding/" $SSH_CONFIG_FILE
    sed -i "s/^\#PermitTTY .*$\|^PermitTTY .*$/PermitTTY $SSH_PermitTTY/" $SSH_CONFIG_FILE
    sed -i "s/^\#TCPKeepAlive .*$\|^TCPKeepAlive .*$/TCPKeepAlive $SSH_TCPKeepAlive/" $SSH_CONFIG_FILE
    sed -i "s/^\#PermitUserEnvironment .*$\|^PermitUserEnvironment .*$/PermitUserEnvironment $SSH_PermitUserEnvironment/" $SSH_CONFIG_FILE
    sed -i "s/^\#Compression .*$\|^Compression .*$/Compression $SSH_Compression/" $SSH_CONFIG_FILE
    sed -i "s/^\#ClientAliveInterval .*$\|^ClientAliveInterval .*$/ClientAliveInterval $SSH_ClientAliveInterval/" $SSH_CONFIG_FILE
    sed -i "s/^\#ClientAliveCountMax .*$\|^ClientAliveCountMax .*$/ClientAliveCountMax $SSH_ClientAliveCountMax/" $SSH_CONFIG_FILE
    sed -i "s/^\#UseDNS .*$\|^UseDNS .*$/UseDNS $SSH_UseDNS/" $SSH_CONFIG_FILE
    sed -i "s/^\#PermitTunnel .*$\|^PermitTunnel .*$/PermitTunnel $SSH_PermitTunnel/" $SSH_CONFIG_FILE
    read -p "SSH Configuration Set. Press any key to continue."
}

f_ssh_hard_s1() {
    #Specific hardening commands for Amazon Linux 2023
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\n" > /etc/crypto-policies/back-ends/opensshserver.config
    systemctl restart sshd
}

f_ssh_hard_s2() {
    #Specific hardening commands for Ubuntu 24.04
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms sntrup761x25519-sha512@openssh.com,gss-curve25519-sha256-,curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256,gss-group16-sha512-,diffie-hellman-group16-sha512\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com\n\nRequiredRSASize 3072\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256" > /etc/ssh/sshd_config.d/ssh-audit_hardening.conf
    service ssh restart
}

f_ssh_hard_s3() {
    #Specific hardening commands for Ubuntu 22.04
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256" > /etc/ssh/sshd_config.d/ssh-audit_hardening.conf
    f_ssh_set_configuration
    service ssh restart
}

f_ssh_hard_s4() {
    #Specific hardening commands for Ubuntu 20.04
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com" > /etc/ssh/sshd_config.d/ssh-audit_hardening.conf
    service ssh restart
}

f_ssh_hard_s5() {
    #Specific harding commands for Ubuntu 18.04
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com" >> $SSH_CONFIG_FILE
    service ssh restart
}

f_ssh_hard_s6() {
    #Specific hardening commands for Ubuntu 16.04
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    service ssh restart
}

f_ssh_hard_s7() {
    #Specific hardening commands for Ubuntu 14.04
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    service ssh restart
}

f_ssh_hard_s8() {
    #Specific hardening commands for Ubuntu Core 18
    echo -e "\n# Only enable RSA and ED25519 host keys.\nHostKey /etc/ssh/ssh_host_rsa_key\nHostKey /etc/ssh/ssh_host_ed25519_key\n\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    service ssh reload
}

f_ssh_hard_s9() {
    #Specific hardening commands for Ubuntu Core 16
    sed -i 's/^MACs \(.*\)$/\#MACs \1/g' $SSH_CONFIG_FILE
    echo -e "\n# Restrict MAC algorithms, as per sshaudit.com hardening guide.\nMACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    service ssh reload
}

f_ssh_hard_s10() {
    #Specific hardening commands for Debian Bookworm (Debian 12)
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\n KexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nRequiredRSASize 3072\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\n" > /etc/ssh/sshd_config.d/ssh-audit_hardening.conf
    service ssh restart
}

f_ssh_hard_s11() {
    #Specific hardening commands for Debian Bullseye (Debian 11)
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,sk-ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com" > /etc/ssh/sshd_config.d/ssh-audit_hardening.conf
    service ssh restart
}

f_ssh_hard_s12() {
    #Specific hardening commands for Debian Buster (Debian 10)
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\nHostKeyAlgorithms ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com" >> $SSH_CONFIG_FILE
    service ssh restart
}

f_ssh_hard_s13() {
    #Specific hardening commands for Rocky Linux 9
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms sntrup761x25519-sha512@openssh.com,curve25519-sha256,curve25519-sha256@libssh.org,gss-curve25519-sha256-,diffie-hellman-group16-sha512,gss-group16-sha512-,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\n\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-gcm@openssh.com,aes128-ctr\n\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com\n\nHostKeyAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nRequiredRSASize 3072\n\nCASignatureAlgorithms sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\nGSSAPIKexAlgorithms gss-curve25519-sha256-,gss-group16-sha512-\n\nHostbasedAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-512,rsa-sha2-256-cert-v01@openssh.com,rsa-sha2-256\n\nPubkeyAcceptedAlgorithms sk-ssh-ed25519-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-512-cert-v01@openssh.com,rsa-sha2-256-cert-v01@openssh.com,sk-ssh-ed25519@openssh.com,ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n\n" > /etc/crypto-policies/back-ends/opensshserver.config
    systemctl restart sshd
}

f_ssh_hard_s14() {
    #Specific hardening commands for RHEL 8 Server / CentOS 8 Server
    cp /etc/crypto-policies/back-ends/opensshserver.config /etc/crypto-policies/back-ends/opensshserver.config.orig
    echo -e "CRYPTO_POLICY='-oCiphers=chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr -oMACs=hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com -oGSSAPIKexAlgorithms=gss-curve25519-sha256- -oKexAlgorithms=curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256 -oHostKeyAlgorithms=ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512 -oPubkeyAcceptedKeyTypes=ssh-ed25519,ssh-ed25519-cert-v01@openssh.com,rsa-sha2-256,rsa-sha2-512'" > /etc/crypto-policies/back-ends/opensshserver.config
    systemctl restart sshd.service
}

f_ssh_hard_s15() {
    #Specific hardening commands for RHEL 7 Server / CentOS 7 Server
    echo -e "\n# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group18-sha512,diffie-hellman-group16-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    systemctl restart sshd.service
}

f_ssh_hard_s16() {
    #Specific hardening commands for pfSense 2.4
    sed -i.bak 's/^MACs \(.*\)$/\#MACs \1/g' $SSH_CONFIG_FILE
    echo "" | echo "MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    service sshd onerestart
}

f_ssh_hard_s17() {
    #Specific hardening commands for OpenBSD 6.2 Server
    echo -e "# Restrict key exchange, cipher, and MAC algorithms, as per sshaudit.com\n# hardening guide.\nKexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha256\nCiphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr\nMACs hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,umac-128-etm@openssh.com" >> $SSH_CONFIG_FILE
    kill -HUP `cat /var/run/sshd.pid`
}

#Setup IronJump Bastion Functions
f_setup_ironjump() {
    echo "Creating Chroot Environment."; sleep 1
    mkdir -p /home/ironjump/{users,servers,endpoints}/chroot
    chown -R root:root /home/ironjump
    chmod -R 755 /home/ironjump
    echo "Creating IronJump Groups."; sleep 1
    groupadd $IRONJUMP_SSH_GROUP
    groupadd $IRONJUMP_SRV_GROUP
    groupadd $IRONJUMP_END_GROUP
    echo "Adding groups to SSH Configuration."; sleep 1
    sed -i "/^Match Group $IRONJUMP_SSH_GROUP/,/\#END MATCH GROUP/d" $SSH_CONFIG_FILE
    cat << EOF >> $SSH_CONFIG_FILE
Match Group $IRONJUMP_SSH_GROUP
    ChrootDirectory $IRONJUMP_CHROOT_ENV/users/chroot
    ForceCommand /bin/false
    PermitTTY no
    AllowTcpForwarding yes
    GatewayPorts yes
    PermitTunnel yes
    AuthenticationMethods publickey
    PasswordAuthentication no
    Subsystem sftp none
#END MATCH GROUP
EOF
    sed -i "/^Match Group $IRONJUMP_SRV_GROUP/,/\#END MATCH GROUP/d" $SSH_CONFIG_FILE
    cat << EOF >> $SSH_CONFIG_FILE
Match Group $IRONJUMP_SRV_GROUP
    ChrootDirectory $IRONJUMP_CHROOT_ENV/servers/chroot
    ForceCommand /bin/false
    PermitTTY no
    AllowTcpForwarding yes
    GatewayPorts yes
    PermitTunnel yes
    AuthenticationMethods publickey
    PasswordAuthentication no
    Subsystem sftp none
#END MATCH GROUP
EOF
    sed -i "/^Match Group $IRONJUMP_END_GROUP/,/\#END MATCH GROUP/d" $SSH_CONFIG_FILE
    cat << EOF >> $SSH_CONFIG_FILE
Match Group $IRONJUMP_END_GROUP
    ChrootDirectory $IRONJUMP_CHROOT_ENV/endpoints/chroot
    ForceCommand /bin/false
    PermitTTY no
    AllowTcpForwarding yes
    GatewayPorts yes
    PermitTunnel yes
    AuthenticationMethods publickey
    PasswordAuthentication no
    Subsystem sftp none
#END MATCH GROUP
EOF
    f_cron_configuration
}

f_os_identity() {
    #Detect OS and Version
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS_NAME=$ID
        OS_VERSION=$VERSION_ID
    elif [[ -f /etc/debian_version ]]; then
        OS_NAME="debian"
        OS_VERSION=$(cat /etc/debian_version)
    elif [[ -f /etc/redhat-release ]]; then
        OS_NAME="rhel"
        OS_VERSION=$(grep -oE '[0-9]+' /etc/redhat-release | head -1)
    elif [[ -f /etc/openbsd-version ]]; then
        OS_NAME="openbsd"
        OS_VERSION=$(uname -r)
    else
        OS_NAME="Unsupported/Undetermined"
        OS_VERSION="Unsupported/Undetermined"
        return 1
    fi
    echo -e "## Hostname:\t$HOSTNAME"
    echo -e "## OS Name:\t$OS_NAME"
    echo -e "## OS Vers:\t$OS_VERSION"
    while read -r i; do echo -e "## IP Address:\t$i\r\n"; done < <(ip a |grep "inet\ " |grep -v "127.0.0.1" | awk '{print $2,$9}')
    nav_top
}

f_cron_setup() {
    echo "Detecting operating system..."

    # Detect OS
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS_NAME=$ID
        OS_VERSION=$VERSION_ID
    elif [[ -f /etc/debian_version ]]; then
        OS_NAME="debian"
        OS_VERSION=$(cat /etc/debian_version)
    elif [[ -f /etc/redhat-release ]]; then
        OS_NAME="rhel"
        OS_VERSION=$(grep -oE '[0-9]+' /etc/redhat-release | head -1)
    elif [[ -f /etc/openbsd-version ]]; then
        OS_NAME="openbsd"
        OS_VERSION=$(uname -r)
    else
        echo "Unsupported OS or cannot determine OS version."
        return 1
    fi

    echo "Detected OS: $OS_NAME $OS_VERSION"

    # Map OS to appropriate package manager
    case "$OS_NAME" in
        "amzn") # Amazon Linux
            if [[ "$OS_VERSION" == "2" || "$OS_VERSION" == "2023" ]]; then
                PKG_MANAGER="yum"
            fi
            ;;
        "ubuntu"|"linuxmint") # Ubuntu, Mint
            if [[ "$OS_VERSION" =~ ^(14.04|16.04|18.04|20.04|22.04|24.04)$ ]]; then
                PKG_MANAGER="apt"
            fi
            ;;
        "debian") # Debian 10, 11, 12
            if [[ "$OS_VERSION" =~ ^(10|11|12)$ ]]; then
                PKG_MANAGER="apt"
            fi
            ;;
        "kali") # Kali Linux
            PKG_MANAGER="apt"
            ;;
        "parrot"|"parrotsec") # Parrot OS / ParrotSec OS
            PKG_MANAGER="apt"
            ;;
        "arch"|"blackarch") # Arch Linux / BlackArch
            PKG_MANAGER="pacman"
            ;;
        "rocky") # Rocky Linux 9
            if [[ "$OS_VERSION" == "9" ]]; then
                PKG_MANAGER="dnf"
            fi
            ;;
        "rhel"|"centos") # RHEL 7, 8, CentOS
            if [[ "$OS_VERSION" == "7" ]]; then
                PKG_MANAGER="yum"
            elif [[ "$OS_VERSION" == "8" ]]; then
                PKG_MANAGER="dnf"
            fi
            ;;
        "pfsense") # pfSense (FreeBSD-based)
            PKG_MANAGER="pkg"
            ;;
        "openbsd") # OpenBSD 6.2 or higher
            if (( $(echo "$OS_VERSION >= 6.2" | bc -l) )); then
                PKG_MANAGER="pkg_add"
            fi
            ;;
        "raspbian"|"raspberrypi") # Raspberry Pi OS
            PKG_MANAGER="apt"
            ;;
        *)
            echo "Unsupported OS: $OS_NAME $OS_VERSION"
            return 1
            ;;
    esac

    echo "Using package manager: $PKG_MANAGER"

    # Check if cron is installed
    if ! command -v crond &> /dev/null && ! command -v cron &> /dev/null; then
        echo "Cron is not installed. Installing..."
        case "$PKG_MANAGER" in
            "apt") sudo apt update && sudo apt install -y cron ;;
            "yum") sudo yum install -y cronie ;;
            "dnf") sudo dnf install -y cronie ;;
            "pacman") sudo pacman -Sy --noconfirm cronie ;;
            "pkg") sudo pkg install -y cron ;;
            "pkg_add") sudo pkg_add cron ;;
            *) echo "Package manager not recognized. Cannot install cron."; return 1 ;;
        esac
    else
        echo "Cron is already installed."
    fi

    # Enable cron at boot and start/restart the service
    echo "Enabling and starting cron..."
    case "$PKG_MANAGER" in
        "apt"|"dnf"|"yum"|"pacman")
            sudo systemctl enable crond 2>/dev/null || sudo systemctl enable cron
            sudo systemctl restart crond 2>/dev/null || sudo systemctl restart cron
            ;;
        "pkg") sudo service cron enable && sudo service cron start ;;
        "pkg_add") sudo rcctl enable cron && sudo rcctl start cron ;;
        *) echo "Service management not recognized."; return 1 ;;
    esac

    echo "Cron setup complete!"
}

f_cron_configuration() {
    f_cron_setup
    echo "Building cron jobs."
    cp ./ironjump_pass_rotation.sh /bin/
#    echo "0 */$PASSWORD_ROTATION * * * root /bin/ironjump_pass_rotation.sh"
    chmod 644 /bin/ironjump_pass_rotation.sh
    echo -e "\r\n--------------------------------------------------------"
    read -p "Setup Complete. Press [ENTER] to continue."
}

## MENU FUNCTIONS (In Order of Appearance)
#deployment_menu
deploy_root() {
#    f_ssh_hard_check
#    f_ssh_hard_os_selection
    f_setup_ironjump
    main_menu
}

deploy_secondary() {
#    read -p "Function Good" ; deployment_menu
    #f_ssh_hard_check
    #f_ssh_hard_os_selection
    #f_setup_ironjump
    #usr_mgmt_new
    main_menu
}

view_configuration() {
#    read -p "Function Good" ; deployment_menu
    if [[ -f ./CONFIG.FILE ]]; then
        cat ./CONFIG.FILE |grep -v "^#" |grep -v ^$
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue."
    else
        echo "Configuration file not in current working director."
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue."
    fi
    deployment_menu
}

mod_configuration() {
#    read -p "Function Good" ; deployment_menu
    if [[ -f ./CONFIG.FILE ]]; then
        vi ./CONFIG.FILE
    else
        echo "Configuration file not in current working director."
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue."
    fi
    deployment_menu
}

harden_ssh_service() {
    f_ssh_hard_check
    f_ssh_hard_os_selection
}

#usr_acct_mgmt_menu
usr_mgmt_list() {
#    read -p "Function Good" ; usr_acct_mgmt_menu
    clear
    echo -e "Account Management"
    nav_top
    echo -e "1) Users: $IRONJUMP_SSH_GROUP\n2) Servers: $IRONJUMP_SRV_GROUP\n3) Endpoints: $IRONJUMP_END_GROUP"
    nav_foot
    case $choice in
        1) echo -e "\r" ; getent group $IRONJUMP_SSH_GROUP |awk -F: '{print $4}' |tr ',' \\n ; echo -e "\r\n--------------------------------------------------------" ; read -p "Press [ENTER] to continue." ; usr_mgmt_list ;;
        2) echo -e "\r" ; getent group $IRONJUMP_SRV_GROUP |awk -F: '{print $4}' |tr ',' \\n ; echo -e "\r\n--------------------------------------------------------" ; read -p "Press [ENTER] to continue." ; usr_mgmt_list ;;
        3) echo -e "\r" ; getent group $IRONJUMP_END_GROUP |awk -F: '{print $4}' |tr ',' \\n ; echo -e "\r\n--------------------------------------------------------" ; read -p "Press [ENTER] to continue." ; usr_mgmt_list ;;
        R|r) ast_reboot ;;
        P|p) usr_acct_mgmt_menu ;;
        Q|q) exit 0 ;;
        *) invalid_choice ;usr_acct_mgmt_menu ;;
    esac
}

usr_mgmt_new() {
#    read -p "Function Good" ; usr_acct_mgmt_menu
    clear
    echo "Create/Add SSH User"
    nav_top
    read -p "Is this for a (B)astion or (E)ndpoint host? " choice
    case "$choice" in 
        B|b) echo "Bastion User Selected" ; usr_type="bastion" ;;
        E|e) echo "Endpoint User Selected" ; usr_type="endpoint" ;;
        *) invalid_choice ; usr_mgmt_new ;;
    esac
    read -p "What is the username? " usr_new_set_name
    read -p "What is the user (REAL) name, nickname, or ID? " usr_new_set_comment
    read -p "Enter the  user's SSH Public Key? " usr_new_set_pubkey
    if [[ ! "$usr_new_set_pubkey" =~ ^ssh-ed25519 ]] &&	 [[ ! "$usr_new_set_pubkey" =~ ^ssh-rsa ]]; then
        echo "SSH Pubkey must be ed25519 (recommended) or RSA. Aborting user creation."
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue."
        usr_acct_mgmt_menu
    fi
    echo -e "\r\nA new $usr_type user account will be created using the following: \r\n\tUsername: $usr_new_set_name \r\n\tIdentity: $usr_new_set_comment \r\n\tPublic SSH Key: $usr_new_set_pubkey \r\n\tEpiration: None"
    echo -e "\r\n--------------------------------------------------------"
    read -p "Press [C] to confirm or [A] to abort: " choice
    case "$choice" in
        A|a) usr_acct_mgmt_menu ;;
        C|c)
            usr_new_set_homedir="$IRONJUMP_CHROOT_ENV/users/$usr_new_set_name"
            usr_new_set_sshdir="$usr_new_set_homedir/.ssh"
            usr_new_set_authorized_keys="$usr_new_set_sshdir/authorized_keys"
            useradd -U -m -s $(which nologin) -d $usr_new_set_homedir -c "$usr_new_set_id" -G $IRONJUMP_SSH_GROUP $usr_new_set_name
            mkdir -p $usr_new_set_sshdir
            echo "$usr_new_set_pubkey" > $usr_new_set_authorized_keys
            chown -R $usr_new_set_name:$usr_new_set_name $usr_new_set_sshdir
            chmod 700 "$usr_new_set_sshdir"
            chmod 600 "$usr_new_set_authorized_keys"
            ;;
        *) invalid_choice; usr_acct_mgmt_new ;;
    esac
    echo "New user account for $usr_new_set_name created for this $usr_type."
    echo -e "\r\n--------------------------------------------------------"
    read -p "Press [ENTER] to continue."
    usr_acct_mgmt_menu
}

usr_mgmt_enable() {
#    read -p "Function Good" ; usr_acct_mgmt_menu
    clear
    echo "User Enable Function"
    nav_top
    read -p "Enter a username to enable: " usr_set_enable
    if [[ $(cat /etc/passwd |grep $usr_set_enable |wc -l) -lt 1 ]]; then
        invalid_choice ; usr_acct_mgmt_menu
    else
        usermod -U $usr_set_enable
        echo "User $usr_set_enable is unlocked."
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue."
        usr_acct_mgmt_menu
    fi
}

usr_mgmt_disable() {
#    read -p "Function Good" ; usr_acct_mgmt_menu
    clear
    echo "User Disable Function"
    nav_top
    read -p "Enter a username to disable: " usr_set_disable
    if [[ $(cat /etc/passwd |grep $usr_set_disable |wc -l) -lt 1 ]]; then
        invalid_choice ; usr_acct_mgmt_menu
    else
        usermod -L $usr_set_disable
        pkill -u $usr_set_disable
        echo "User $usr_set_disable is locked."
        echo -e "\r\n--------------------------------------------------------"
        read -p "Press [ENTER] to continue."
        usr_acct_mgmt_menu
    fi
}

usr_mgmt_delete() {
#    read -p "Function Good" ; usr_acct_mgmt_menu
    clear
    echo "User Delete Function"
    nav_top
    read -p "Enter a username to delete: " usr_set_delete
    if [[ $(cat /etc/passwd |grep $usr_set_delete |wc -l) -lt 1 ]]; then
        invalid_choice ; usr_acct_mgmt_menu
    else
        read -p "Are you sure you want to delete $usr_set_delete? Type [CONFIRM]: " choice
        if [[ $(echo $choice | tr [[:upper:]] [[:lower:]]) == "confirm" ]]; then
            #userdel -r $usr_set_delete
            #pkill -u $usr_set_delete
            echo "User $usr_set_delete is no more!"
            echo -e "\r\n--------------------------------------------------------"
            read -p "Press [ENTER] to continue."
            usr_acct_mgmt_menu
        else
            read -p "Confirmation not given. Returning to User Account Menu..."
            usr_acct_mgmt_menu
       fi
    fi
}

usr_mgmt_mod_pubkey() {
    read -p "Function Good" ; usr_acct_mgmt_menu
}

usr_mgmt_set_expire() {
#    read -p "Function Good" ; usr_acct_mgmt_menu
    clear
    echo "User Epiration Function"
    nav_top
    read -p "Enter a username to expire: " usr_set_expire_name
    if [[ $(cat /etc/passwd |grep $usr_set_expire_name |wc -l) -lt 1 ]]; then
        invalid_choice ; usr_acct_mgmt_menu
    else
        echo -e "To set an expiration, specify the number of days as:\r\n\t   -1: Never Expire, or\r\n\t1-999: Number of days from now\r\n"
        read -p "In how many days from today would you like the account to expire? " usr_set_expire_days
        if [[ "$usr_set_expire_days" == "-1" ]]; then
            chage -E -1 $usr_set_expire_name
            echo "User $usr_set_expire_name is set to never expire."
            echo -e "\r\n--------------------------------------------------------"
            read -p "Press [ENTER] to continue."
            usr_acct_mgmt_menu
        fi
        if [[ "$usr_set_expire_days" =~ ^[0-9]+$ ]] && [[ "$usr_set_expire_days" -gt 0 ]]; then
            chage -E $usr_set_expire_days $usr_set_expire_name
            echo "User $usr_set_expire_name account will expire in $usr_set_expire_days days."
            echo -e "\r\n--------------------------------------------------------"
            read -p "Press [ENTER] to continue."
            usr_acct_mgmt_menu
        fi
    fi
}

#dev_acct_mgmt_menu
dev_mgmt_list() {
    read -p "Function Good" ; dev_acct_mgmt_menu
}

dev_mgmt_new() {
    read -p "Function Good" ; dev_acct_mgmt_menu
}

dev_mgmt_enable() {
    read -p "Function Good" ; dev_acct_mgmt_menu
}

dev_mgmt_disable() {
    read -p "Function Good" ; dev_acct_mgmt_menu
}

dev_mgmt_delete() {
    read -p "Function Good" ; dev_acct_mgmt_menu
}

dev_mgmt_mod_pubkey() {
    read -p "Function Good" ; dev_acct_mgmt_menu
}

dev_mgmt_set_expire() {
    read -p "Function Good" ; dev_acct_mgmt_menu
}

#ep_mgmt_menu
ep_connect() {
#    read -p "Function Good" ; ep_mgmt_menu
    #f_ssh_*
    #f_ssh_os_selection
    #usr_mgmt_new
    ep_mgmt_menu
}

ep_add_local_usr() {
#    read -p "Function Good" ; ep_mgmt_menu
    #usr_mgmt_new
    ep_mgmt_menu
}

ep_promote_local_usr() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_enable_local_usr() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_disable_local_usr() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_expire_local_usr() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_chpass_local_usr() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_mod_local_usr_pubkey() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_delete_local_usr() {
    read -p "Function Good" ; ep_mgmt_menu
}

ep_smelt_device() {
    read -p "Function Good" ; ep_mgmt_menu
    #THIS IS COMPLETE, BUT FOR DEVELOPMENT IS NOT INCLUDED ON THIS SYSTEM'S CODE.
}

ssh_monitor() {
    trap main_menu INT
    while true; do
        clear
        echo "SSH Connection Monitor - $(date)"
        echo "--------------------------------------------"

        # Display current SSH connections with details (IPs, users, and ports)
        printf "%-15s %-20s %-10s %-10s\n" "USER" "REMOTE_IP" "PORT" "PID"
        lsof -iTCP -sTCP:ESTABLISHED -n | grep sshd | while read -r line; do
            pid=$(echo "$line" | awk '{print $2}')
            user=$(ps -o user= -p "$pid")
            remote_ip=$(echo "$line" | awk '{print $9}' | cut -d '>' -f 2 | cut -d ':' -f 1)
            port=$(echo "$line" | awk '{print $9}' | cut -d '>' -f 2 | cut -d ':' -f 2)
            printf "%-15s %-20s %-10s %-10s\n" "$user" "$remote_ip" "$port" "$pid" |grep -v root
        done

        # Add a separator for readability
        echo "--------------------------------------------"
        # Sleep for 3 seconds before refreshing
        sleep 3
    done
}
